>>> help(Graph)
Help on module topologicpy.Graph in topologicpy:

NAME
    topologicpy.Graph

DESCRIPTION
    # Copyright (C) 2025
    # Wassim Jabi <wassim.jabi@gmail.com>
    #
    # This program is free software: you can redistribute it and/or modify it under
    # the terms of the GNU Affero General Public License as published by the Free Software
    # Foundation, either version 3 of the License, or (at your option) any later
    # version.
    #
    # This program is distributed in the hope that it will be useful, but WITHOUT
    # ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    # FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
    # details.
    #
    # You should have received a copy of the GNU Affero General Public License along with
    # this program. If not, see <https://www.gnu.org/licenses/>.

CLASSES
    builtins.object
        Graph
        WorkerProcessPool
    builtins.tuple(builtins.object)
        GraphQueueItem
    multiprocessing.context.Process(multiprocessing.process.BaseProcess)
        MergingProcess
        WorkerProcess

    class Graph(builtins.object)
     |  Methods defined here:
     |
     |  AdjacencyDictionary(graph, vertexLabelKey: str = None, edgeKey: str = 'L
ength', includeWeights: bool = False, mantissa: int = 6)
     |      Returns the adjacency dictionary of the input Graph.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexLabelKey : str , optional
     |          The returned vertices are labelled according to the dictionary values stored under this key.
     |          If the vertexLabelKey does not exist, it will be created and the vertices are labelled numerically and stored in the vertex dictionary under this key. Default is None.
     |      edgeKey : str , optional
     |          If set, the edges' dictionaries will be searched for this key to set their weight. If the key is set to "length" (case insensitive), the length of the edge will be used as its weight. If set to None, a weight of 1 will be used. Default is "Length".
     |      includeWeights : bool , optional
     |          If set to True, edge weights are included. Otherwise, they are not. Default is False.
     |      mantissa : int , optional
     |              The number of decimal places to round the result to. Default is 6.
     |
     |      Returns
     |      -------
     |      dict
     |          The adjacency dictionary.
     |
     |      Matches graphA as a subgraph of graphB using structural and semantic similarity.
     |
     |      Parameters
     |      ----------
     |      graphA : topologic_core.Graph
     |          The smaller graph (subgraph).
     |      graphB : topologic_core.Graph
     |          The larger graph (supergraph).
     |      vertexKeys : str or list of str, optional
     |          Keys used to semantically compare vertices.
     |      edgeKeys : str or list of str, optional
     |          Keys used to semantically compare edges.
     |      maxMatches : int , optional
     |          The maximum number of matches to find. Default is 10.
     |      timeLimit : int , optional
     |      tolerance : float, optional
     |          Allowed numeric deviation or minimum string similarity (e.g. 0.2 = \u226580% match). Default is 0.
     |      silent : bool, optional
     |          If True, suppresses warnings and errors.
     |
     |      Returns
     |      -------
     |      list of dict
     |          List of mappings from node index in graphA to graphB, sorted by descending similarity.
     |
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |
     |  AccessibilityCentrality(graph, step: int = 2, normalize: bool = False, key: str = 'accessibility_centrality', colorKey: str = 'ac_color', colorScale: str = 'viridis', mantissa: int = 6, tolerance: float = 0.0001, silent: bool = False)
     |      Computes the accessibility centrality of each vertex in the graph using random walks of fixed step length.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      step : int, optional
     |          The length of the random walk (number of steps). Default is 2.
     |      normalize : bool, optional
     |          If True, normalize the output to the range 0 to 1. Default is False.
     |      key : str, optional
     |          Dictionary key to store the accessibility centrality value. Default is "accessibility_centrality".
     |      colorKey : str, optional
     |          Dictionary key to store the color value. Default is "ac_color".
     |      colorScale : str, optional
     |          Name of the Plotly color scale to use. Default is "viridis".
     |      mantissa : int, optional
     |          Decimal precision. Default is 6.
     |      tolerance : float, optional
     |          The desired Tolerance. Not used here but included for API compatibility. Default is 0.0001.
     |      silent : bool, optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      list
     |          A list of accessibility centrality values for each vertex in the graph.
     |
     |      Adds the input edge to the input Graph.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      edge : topologic_core.Edge
     |          The input edge.
     |      transferVertexDictionaries : bool, optional
     |          If set to True, the dictionaries of the vertices are transferred to the graph.
     |      transferEdgeDictionaries : bool, optional
     |          If set to True, the dictionaries of the edges are transferred to the graph.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The input graph with the input edge added to it.
     |
     |  AddVertex(graph, vertex, tolerance: float = 0.0001, silent: bool = False)
     |      Adds the input vertex to the input graph.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertex : topologic_core.Vertex
     |          The input vertex.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The input graph with the input vertex added to it.
     |
     |  AddVertices(graph, vertices, tolerance: float = 0.0001, silent: bool = False)
     |      Adds the input vertex to the input graph.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertices : list
     |          The input list of vertices.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The input graph with the input vertex added to it.
     |
     |  AdjacencyList(graph, vertexKey=None, reverse=True, tolerance=0.0001)
     |      Returns the adjacency list of the input Graph. See https://en.wikipedia.org/wiki/Adjacency_list.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexKey : str , optional
     |      reverse : bool , optional
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      list
     |          The adjacency list.
     |
     |  AdjacencyMatrix(graph, vertexKey=None, reverse=False, edgeKeyFwd=None, edgeKeyBwd=None, bidirKey=None, bidirectional=True, useEdgeIndex=False, useEdgeLength=False, mantissa: int = 6, tolerance=0.0001)
     |      Returns the adjacency matrix of the input Graph. See https://en.wikipedia.org/wiki/Adjacency_matrix.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexKey : str , optional
     |      reverse : bool , optional
     |      edgeKeyFwd : str , optional
     |          If set, the value at this key in the connecting edge from start vertex to end vertex (forward) will be used instead of the value 1. Default is None. useEdgeIndex and useEdgeLength override this setting.
     |      edgeKeyBwd : str , optional
     |          If set, the value at this key in the connecting edge from end vertex to start vertex (backward) will be used instead of the value 1. Default is None. useEdgeIndex and useEdgeLength override this setting.
     |      bidirKey : bool , optional
     |          If set to True or False, this key in the connecting edge will be used to determine is the edge is supposed to be bidirectional or not. If set to None, the input variable bidrectional will be used instead. Default is None
     |      bidirectional : bool , optional
     |          If set to True, the edges in the graph that do not have a bidireKey in their dictionaries will be treated as being bidirectional. Otherwise, the start vertex and end vertex of the connecting edge will determine the direction. Default is True.
     |      useEdgeIndex : bool , optional
     |          If set to True, the adjacency matrix values will the index of the edge in Graph.Edges(graph). Default is False. Both useEdgeIndex, useEdgeLength should not be True at the same time. If they are, useEdgeLength will be used.
     |      useEdgeLength : bool , optional
     |          If set to True, the adjacency matrix values will the length of the edge in Graph.Edges(graph). Default is False. Both useEdgeIndex, useEdgeLength should not be True at the same time. If they are, useEdgeLength will be used.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      list
     |          The adjacency matrix.
     |
     |  AdjacencyMatrixCSVString(graph, vertexKey=None, reverse=False, edgeKeyFwd=None, edgeKeyBwd=None, bidirKey=None, bidirectional=True, useEdgeIndex=False, useEdgeLength=False, mantissa: int = 6, tolerance=0.0001)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexKey : str , optional
     |      reverse : bool , optional
     |      edgeKeyFwd : str , optional
     |          If set, the value at this key in the connecting edge from start vertex to end vertex (forward) will be used instead of the value 1. Default is None. useEdgeIndex and useEdgeLength override this setting.
     |      edgeKeyBwd : str , optional
     |          If set, the value at this key in the connecting edge from end vertex to start vertex (backward) will be used instead of the value 1. Default is None. useEdgeIndex and useEdgeLength override this setting.
     |      bidirKey : bool , optional
     |          If set to True or False, this key in the connecting edge will be used to determine is the edge is supposed to be bidirectional or not. If set to None, the input variable bidrectional will be used instead. Default is None
     |      bidirectional : bool , optional
     |          If set to True, the edges in the graph that do not have a bidireKey in their dictionaries will be treated as being bidirectional. Otherwise, the start vertex and end vertex of the connecting edge will determine the direction. Default is True.
     |      useEdgeIndex : bool , optional
     |          If set to True, the adjacency matrix values will the index of the edge in Graph.Edges(graph). Default is False. Both useEdgeIndex, useEdgeLength should not be True at the same time. If they are, useEdgeLength will be used.
     |      useEdgeLength : bool , optional
     |          If set to True, the adjacency matrix values will the length of the edge in Graph.Edges(graph). Default is False. Both useEdgeIndex, useEdgeLength should not be True at the same time. If they are, useEdgeLength will be used.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      str
     |          A string in CSV format representing the adjacency matrix.
     |          Returns an empty string if conversion fails.
     |
     |  AdjacentEdges(graph, edge, silent: bool = False)
     |      Returns the list of edges connected to the input edge.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      edge : topologic_core.Edge
     |          the input edge.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      list
     |          The list of adjacent edges.
     |
     |  AdjacentVertices(graph, vertex, silent: bool = False)
     |      Returns the list of vertices connected to the input vertex.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertex : topologic_core.Vertex
     |          the input vertex.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      list
     |          The list of adjacent vertices.
     |
     |      Returns the list of vertices connected to the input vertex that are in the input compass direction.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertex : topologic_core.Vertex
     |          the input vertex.
     |      compassDirection : str , optional
     |          The compass direction. See Vector.CompassDirections(). Default is "Up".
     |      tolerance : float , optional
     |              The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      list
     |          The list of adjacent vertices that are in the compass direction.
     |
     |      Returns the list of vertices connected to the input vertex that are in the input vector direction.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertex : topologic_core.Vertex
     |          the input vertex.
     |      vector : list , optional
     |          The vector direction. Default is [0,0,1].
     |      tolerance : float , optional
     |              The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      list
     |          The list of adjacent vertices that are in the vector direction.
     |
     |  AllPaths(graph, vertexA, vertexB, timeLimit=10, silent: bool = False)
     |      Returns all the paths that connect the input vertices within the allowed time limit in seconds.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexA : topologic_core.Vertex
     |          The first input vertex.
     |      vertexB : topologic_core.Vertex
     |          The second input vertex.
     |      timeLimit : int , optional
     |          The time limit in second. Default is 10 seconds.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      list
     |          The list of all paths (wires) found within the time limit.
     |
     |  AverageClusteringCoefficient(graph, mantissa: int = 6, silent: bool = False)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |
     |      Returns
     |      -------
     |      float
     |          The average clustering coefficient of the input graph.
     |
     |  BOTGraph(graph, bidirectional: bool = False, includeAttributes: bool = False, includeLabel: bool = False, includeGeometry: bool = False, siteLabel: str = 'Site_0001', siteDictionary: dict = None, buildingLabel: str = 'Building_0001', buildingDictionary: dict = None, storeyPrefix: str = 'Storey', floorLevels: list = [], vertexLabelKey: str = 'label', typeKey: str = 'type', verticesKey: str = 'vertices', edgesKey: str = 'edges', edgeLabelKey: str = '', sourceKey: str = 'source', targetKey: str = 'target', xKey: str = 'hasX', yKey: str = 'hasY', zKey: str = 'hasZ', geometryKey: str = 'brep', spaceType: str = 'space', wallType: str = 'wall', slabType: str = 'slab', doorType: str = 'door', windowType: st     |      Creates an RDF graph according to the BOT ontology. See https://w3c-lbd-cg.github.io/bot/.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      bidirectional : bool , optional
     |      includeAttributes : bool , optional
     |      includeLabel : bool , optional
     |          If set to True, a label is attached to each node. Otherwise, it is not. Default is False.
     |      includeGeometry : bool , optional
     |      siteLabel : str , optional
     |          The desired site label. Default is "Site_0001".
     |      siteDictionary : dict , optional
     |          The dictionary of site attributes to include in the output. Default is None.
     |      buildingLabel : str , optional
     |          The desired building label. Default is "Building_0001".
     |      buildingDictionary : dict , optional
     |          The dictionary of building attributes to include in the output. Default is None.
     |      storeyPrefix : str , optional
     |          The desired prefixed to use for each building storey. Default is "Storey".
     |      floorLevels : list , optional
     |          The list of floor levels. This should be a numeric list, sorted from lowest to highest.
     |      verticesKey : str , optional
     |          The desired key name to call vertices. Default is "vertices".
     |      edgesKey : str , optional
     |          The desired key name to call edges. Default is "edges".
     |      vertexLabelKey : str , optional
     |          If set to a valid string, the vertex label will be set to the value at this key. Otherwise it will be set to Vertex_XXXX where XXXX is a sequential unique number.-     |          Note: If vertex labels are not unique, they will be forced to be unique.
     |      edgeLabelKey : str , optional
     |          If set to a valid string, the edge label will be set to the value at this key. Otherwise it will be set to Edge_XXXX where XXXX is a sequential unique number.-- Mo     |          Note: If edge labels are not unique, they will be forced to be unique.
     |      sourceKey : str , optional
     |          The dictionary key used to store the source vertex. Default is "source".
     |      targetKey : str , optional
     |          The dictionary key used to store the target vertex. Default is "target".
     |      xKey : str , optional
     |          The desired key name to use for x-coordinates. Default is "hasX".
     |      yKey : str , optional
     |          The desired key name to use for y-coordinates. Default is "hasY".
     |      zKey : str , optional
     |          The desired key name to use for z-coordinates. Default is "hasZ".
     |      geometryKey : str , optional
     |          The desired key name to use for geometry. Default is "brep".
     |      typeKey : str , optional
     |          The dictionary key to use to look up the type of the node. Default is "type".
     |      geometryKey : str , optional
     |          The dictionary key to use to look up the geometry of the node. Default is "brep".
     |      spaceType : str , optional
     |          The dictionary string value to use to look up vertices of type "space". Default is "space".
     |      wallType : str , optional
     |          The dictionary string value to use to look up vertices of type "wall". Default is "wall".
     |      slabType : str , optional
     |          The dictionary string value to use to look up vertices of type "slab". Default is "slab".
     |      doorType : str , optional
     |          The dictionary string value to use to look up vertices of type "door". Default is "door".
     |      windowType : str , optional
     |          The dictionary string value to use to look up vertices of type "window". Default is "window".
     |      contentType : str , optional
     |          The dictionary string value to use to look up vertices of type "content". Default is "contents".
     |      namespace : str , optional
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |
     |
     |      Returns
     |      -------
     |      rdflib.graph.Graph
     |          The rdf graph using the BOT ontology.
     |
     |  BOTString(graph, format='turtle', bidirectional: bool = False, includeAttributes: bool = False, includeLabel: bool = False, includeGeometry: bool = False, siteLabel: str = 'Site_0001', siteDictionary: dict = None, buildingLabel: str = 'Building_0001', buildingDictionary: dict = None, storeyPrefix: str = 'Storey', floorLevels: list = [], vertexLabelKey: str = 'label', typeKey: str = 'type', verticesKey: str = 'vertices', edgesKey: str = 'edges', edgeLabelKey: str = '', sourceKey: str = 'source', targetKey: str = 'target', xKey: str = 'hasX', yKey: str = 'hasY', zKey: str = 'hasZ', geometryKey: str = 'brep', spaceType: str = 'space', wallType: str = 'wall', slabType: str = 'slab', doorType: str = 'doo     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      format : str , optional
     |          The desired output format, the options are listed below. Thde default is "turtle".
     |          turtle, ttl or turtle2 : Turtle, turtle2 is just turtle with more spacing & linebreaks
     |          xml or pretty-xml : RDF/XML, Was the default format, rdflib < 6.0.0
     |          json-ld : JSON-LD , There are further options for compact syntax and other JSON-LD variants
     |          ntriples, nt or nt11 : N-Triples , nt11 is exactly like nt, only utf8 encoded
     |          n3 : Notation-3 , N3 is a superset of Turtle that also caters for rules and a few other things
     |          trig : Trig , Turtle-like format for RDF triples + context (RDF quads) and thus multiple graphs
     |          trix : Trix , RDF/XML-like format for RDF quads
     |          nquads : N-Quads , N-Triples-like format for RDF quads
     |      bidirectional : bool , optional
     |      includeAttributes : bool , optional
     |      includeLabel : bool , optional
     |          If set to True, a label is attached to each node. Otherwise, it is not. Default is False.
     |      includeGeometry : bool , optional
     |      siteLabel : str , optional
     |          The desired site label. Default is "Site_0001".
     |      siteDictionary : dict , optional
     |          The dictionary of site attributes to include in the output. Default is None.
     |      buildingLabel : str , optional
     |          The desired building label. Default is "Building_0001".
     |      buildingDictionary : dict , optional
     |          The dictionary of building attributes to include in the output. Default is None.
     |      storeyPrefix : str , optional
     |          The desired prefixed to use for each building storey. Default is "Storey".
     |      floorLevels : list , optional
     |          The list of floor levels. This should be a numeric list, sorted from lowest to highest.
     |      verticesKey : str , optional
     |          The desired key name to call vertices. Default is "vertices".
     |      edgesKey : str , optional
     |          The desired key name to call edges. Default is "edges".
     |      vertexLabelKey : str , optional
     |          If set to a valid string, the vertex label will be set to the value at this key. Otherwise it will be set to Vertex_XXXX where XXXX is a sequential unique number.-     |          Note: If vertex labels are not unique, they will be forced to be unique.
     |      edgeLabelKey : str , optional
     |          If set to a valid string, the edge label will be set to the value at this key. Otherwise it will be set to Edge_XXXX where XXXX is a sequential unique number.-- Mo     |          Note: If edge labels are not unique, they will be forced to be unique.
     |      sourceKey : str , optional
     |          The dictionary key used to store the source vertex. Default is "source".
     |      targetKey : str , optional
     |          The dictionary key used to store the target vertex. Default is "target".
     |      xKey : str , optional
     |          The desired key name to use for x-coordinates. Default is "hasX".
     |      yKey : str , optional
     |          The desired key name to use for y-coordinates. Default is "hasY".
     |      zKey : str , optional
     |          The desired key name to use for z-coordinates. Default is "hasZ".
     |      geometryKey : str , optional
     |          The desired key name to use for geometry. Default is "brep".
     |      typeKey : str , optional
     |          The dictionary key to use to look up the type of the node. Default is "type".
     |      spaceType : str , optional
     |          The dictionary string value to use to look up vertices of type "space". Default is "space".
     |      wallType : str , optional
     |          The dictionary string value to use to look up vertices of type "wall". Default is "wall".
     |      slabType : str , optional
     |          The dictionary string value to use to look up vertices of type "slab". Default is "slab".
     |      doorType : str , optional
     |          The dictionary string value to use to look up vertices of type "door". Default is "door".
     |      windowType : str , optional
     |          The dictionary string value to use to look up vertices of type "window". Default is "window".
     |      contentType : str , optional
     |          The dictionary string value to use to look up vertices of type "content". Default is "contents".
     |      namespace : str , optional
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |
     |
     |      Returns
     |      -------
     |      str
     |          The rdf graph serialized string using the BOT ontology.
     |
     |  BetweennessCentrality(graph, method: str = 'vertex', weightKey='length', normalize: bool = False, nxCompatible: bool = False, key: str = 'betweenness_centrality', colorKey='bc_color', colorScale='viridis', mantissa: int = 6, tolerance: float = 0.001, silent: bool = False)
     |          Returns the betweenness centrality of the input graph. The order of the returned list is the same as the order of vertices/edges. See https://en.wikipedia.org/wiki/Betweenness_centrality.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      method : str , optional
     |      weightKey : str , optional
     |          the shortest path. If a numeric value cannot be retrieved from an edge, a value of 1 is used instead.
     |      normalize : bool , optional
     |      nxCompatible : bool , optional
     |          If set to True, and normalize input parameter is also set to True, the values are set to be identical to NetworkX values. Otherwise, they are normalized between 0 and 1. Default is False.
     |      key : str , optional
     |      colorKey : str , optional
     |      colorScale : str , optional
     |          The desired type of plotly color scales to use (e.g. "viridis", "plasma"). Default is "viridis". For a full list of names, see https://plotly.com/python/builtin-colorscales/.
     |          In addition to these, three color-blind friendly scales are included. These are "protanopia", "deuteranopia", and "tritanopia" for red, green, and blue colorblindness respectively.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      list
     |
     |  BetweennessPartition(graph, n=2, m=10, key='partition', tolerance=0.0001, silent=False)
     |
     |      Parameters
     |      ----------
     |      graph : topologicp.Graph
     |          The input topologic graph.
     |      n : int , optional
     |      m : int , optional
     |          The desired maximum number of tries to partition the graph when selecting the "Betweenness" method. This parameter is ignored for other methods. Default is 10.-- M     |      key : str , optional
     |          The vertex and edge dictionary key under which to store the parition number. Default is "partition".
     |          Valid partition numbers start from 1. Cut edges receive a partition number of 0.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |              If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologicpy.Graph
     |          The partitioned topologic graph.
     |
     |  Bridges(graph, key: str = 'bridge', silent: bool = False)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      key : str , optional
     |          The edge dictionary key under which to store the bridge status. 0 means the edge is NOT a bridge. 1 means that the edge IS a bridge. Default is "bridge".-- More  -     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      list
     |          The list of bridge edges in the input graph.
     |
     |  ByAdjacencyMatrix(adjacencyMatrix, dictionaries=None, edgeKeyFwd='weightFwd', edgeKeyBwd='weightBwd', xMin=-0.5, yMin=-0.5, zMin=-0.5, xMax=0.5, yMax=0.5, zMax=0.5, silent=False)
     |      Returns graphs according to the input folder path. This method assumes the CSV files follow DGL's schema.
     |
     |      Parameters
     |      ----------
     |      adjacencyMatrix : list
     |      dictionaries : list , optional
     |          A list of dictionaries to assign to the vertices of the graph. This list should be in
     |          the same order and of the same length as the rows in the adjacency matrix.
     |      edgeKeyFwd : str , optional
     |          The dictionary key under which to store the edge weight value for forward edge. Default is "weight".
     |      edgeKeyBwd : str , optional
     |          The dictionary key under which to store the edge weight value for backward edge. Default is "weight".
     |      xMin : float , optional
     |          The desired minimum value to assign for a vertex's X coordinate. Default is -0.5.
     |      yMin : float , optional
     |          The desired minimum value to assign for a vertex's Y coordinate. Default is -0.5.
     |      zMin : float , optional
     |          The desired minimum value to assign for a vertex's Z coordinate. Default is -0.5.
     |      xMax : float , optional
     |          The desired maximum value to assign for a vertex's X coordinate. Default is 0.5.
     |      yMax : float , optional
     |          The desired maximum value to assign for a vertex's Y coordinate. Default is 0.5.
     |      zMax : float , optional
     |          The desired maximum value to assign for a vertex's Z coordinate. Default is 0.5.
     |      silent : bool , optional
     |          If set to True, no warnings or error messages are displayed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The created graph.
     |
     |  ByAdjacencyMatrixCSVPath(path: str, dictionaries: list = None, silent: bool = False)
     |
     |      Parameters
     |      ----------
     |      path : str
     |          The file path to the adjacency matrix CSV file.
     |      dictionaries : list , optional
     |          A list of dictionaries to assign to the vertices of the graph. This list should be in
     |          the same order and of the same length as the rows in the adjacency matrix.
     |      silent : bool , optional
     |          If set to True, no warnings or error messages are displayed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The created graph.
     |
     |
     |
     |  ByCSVPath(path, graphIDHeader='graph_id', graphLabelHeader='label', graphFeaturesHeader='feat', graphFeaturesKeys=[], edgeSRCHeader='src_id', edgeDSTHeader='dst_id', edgeLabelHeader='label', edgeTrainMaskHeader='train_mask', edgeValidateMaskHeader='val_mask', edgeTestMaskHeader='test_mask', edgeFeaturesHeader='feat', edgeFeaturesKeys=[], nodeIDHeader='node_id', nodeLabelHeader='label', nodeTrainMaskHeader='train_mask', nodeValidateMaskHeader='val_mask', nodeTestMaskHeader='test_mask', nodeFeaturesHeader='feat', nodeXHeader='X', nodeYHeader='Y', nodeZHeader='Z', nodeFeaturesKeys=[], tolerance=0.0001, silent=False)
     |      Returns graphs according to the input folder path. This method assumes the CSV files follow DGL's schema.
     |
     |      Parameters
     |      ----------
     |      path : str
     |          The path to the folder containing the .yaml and .csv files for graphs, edges, and nodes.
     |      graphIDHeader : str , optional
     |          The column header string used to specify the graph id. Default is "graph_id".
     |      graphLabelHeader : str , optional
     |          The column header string used to specify the graph label. Default is "label".
     |      graphFeaturesHeader : str , optional
     |          The column header string used to specify the graph features. Default is "feat".
     |      edgeSRCHeader : str , optional
     |          The column header string used to specify the source vertex id of edges. Default is "src_id".
     |      edgeDSTHeader : str , optional
     |          The column header string used to specify the destination vertex id of edges. Default is "dst_id".
     |      edgeLabelHeader : str , optional
     |          The column header string used to specify the label of edges. Default is "label".
     |      edgeTrainMaskHeader : str , optional
     |          The column header string used to specify the train mask of edges. Default is "train_mask".
     |      edgeValidateMaskHeader : str , optional
     |          The column header string used to specify the validate mask of edges. Default is "val_mask".
     |      edgeTestMaskHeader : str , optional
     |          The column header string used to specify the test mask of edges. Default is "test_mask".
     |      edgeFeaturesHeader : str , optional
     |          The column header string used to specify the features of edges. Default is "feat".
     |      edgeFeaturesKeys : list , optional
     |      nodeIDHeader : str , optional
     |          The column header string used to specify the id of nodes. Default is "node_id".
     |      nodeLabelHeader : str , optional
     |          The column header string used to specify the label of nodes. Default is "label".
     |      nodeTrainMaskHeader : str , optional
     |          The column header string used to specify the train mask of nodes. Default is "train_mask".
     |      nodeValidateMaskHeader : str , optional
     |          The column header string used to specify the validate mask of nodes. Default is "val_mask".
     |      nodeTestMaskHeader : str , optional
     |          The column header string used to specify the test mask of nodes. Default is "test_mask".
     |      nodeFeaturesHeader : str , optional
     |          The column header string used to specify the features of nodes. Default is "feat".
     |      nodeXHeader : str , optional
     |          The column header string used to specify the X coordinate of nodes. Default is "X".
     |      nodeYHeader : str , optional
     |          The column header string used to specify the Y coordinate of nodes. Default is "Y".
     |      nodeZHeader : str , optional
     |          The column header string used to specify the Z coordinate of nodes. Default is "Z".
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      dict
     |
     |  ByDGCNNFile(file, key: str = 'label', tolerance: float = 0.0001)
     |      Creates a graph from a DGCNN File.
     |
     |      Parameters
     |      ----------
     |      file : file object
     |          The input file.
     |      key : str , optional
     |          The desired key for storing the node label. Default is "label".
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      dict
     |          A dictionary with the graphs and labels. The keys are 'graphs' and 'labels'.
     |
     |  ByDGCNNPath(path, key: str = 'label', tolerance: float = 0.0001)
     |      Creates a graph from a DGCNN path.
     |
     |      Parameters
     |      ----------
     |      path : str
     |          The input file path.
     |      key : str , optional
     |          The desired key for storing the node label. Default is "label".
     |      tolerance : str , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      dict
     |          A dictionary with the graphs and labels. The keys are 'graphs' and 'labels'.
     |
     |  ByDGCNNString(string, key: str = 'label', tolerance: float = 0.0001)
     |      Creates a graph from a DGCNN string.
     |
     |      Parameters
     |      ----------
     |      string : str
     |          The input string.
     |      key : str , optional
     |          The desired key for storing the node label. Default is "label".
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      dict
     |          A dictionary with the graphs and labels. The keys are 'graphs' and 'labels'.
     |
     |  ByIFCFile(file, includeTypes: list = [], excludeTypes: list = [], includeRels: list = [], excludeRels: list = [], transferDictionaries: bool = False, useInternalVertex: bool = False, storeBREP: bool = False, removeCoplanarFaces: bool = False, xMin: float = -0.5, yMin: float = -0.5, zMin: float = -0.5, xMax: float = 0.5, yMax: float = 0.5, zMax: float = 0.5, epsilon: float = 0.0001, tolerance: float = 0.0001, silent: bool = False)
     |      Create a Graph from an IFC file. This code is partially based on code from Bruno Postle.
     |
     |      Parameters
     |      ----------
     |      file : file
     |          The input IFC file
     |      includeTypes : list , optional
     |      excludeTypes : list , optional
     |      includeRels : list , optional
     |      excludeRels : list , optional
     |      transferDictionaries : bool , optional
     |      useInternalVertex : bool , optional
     |      storeBREP : bool , optional
     |          If set to True, store the BRep of the subtopology in its representative vertex. Default is False.
     |      removeCoplanarFaces : bool , optional
     |          If set to True, coplanar faces are removed. Otherwise they are not. Default is False.
     |      xMin : float, optional
     |          The desired minimum value to assign for a vertex's X coordinate. Default is -0.5.
     |      yMin : float, optional
     |          The desired minimum value to assign for a vertex's Y coordinate. Default is -0.5.
     |      zMin : float, optional
     |          The desired minimum value to assign for a vertex's Z coordinate. Default is -0.5.
     |      xMax : float, optional
     |          The desired maximum value to assign for a vertex's X coordinate. Default is 0.5.
     |      yMax : float, optional
     |          The desired maximum value to assign for a vertex's Y coordinate. Default is 0.5.
     |      zMax : float, optional
     |          The desired maximum value to assign for a vertex's Z coordinate. Default is 0.5.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The created graph.
     |
     |  ByIFCFile_old(file, includeTypes: list = [], excludeTypes: list = [], includeRels: list = [], excludeRels: list = [], transferDictionaries: bool = False, useInternalVertex: bool = False, storeBREP: bool = False, removeCoplanarFaces: bool = False, xMin: float = -0.5, yMin: float = -0.5, zMin: float = -0.5, xMax: float = 0.5, yMax: float = 0.5, zMax: float = 0.5, tolerance: float = 0.0001)
     |      Create a Graph from an IFC file. This code is partially based on code from Bruno Postle.
     |
     |      Parameters
     |      ----------
     |      file : file
     |          The input IFC file
     |      includeTypes : list , optional
     |      excludeTypes : list , optional
     |      includeRels : list , optional
     |      excludeRels : list , optional
     |      transferDictionaries : bool , optional
     |      useInternalVertex : bool , optional
     |      storeBREP : bool , optional
     |          If set to True, store the BRep of the subtopology in its representative vertex. Default is False.
     |      removeCoplanarFaces : bool , optional
     |          If set to True, coplanar faces are removed. Otherwise they are not. Default is False.
     |      xMin : float, optional
     |          The desired minimum value to assign for a vertex's X coordinate. Default is -0.5.
     |      yMin : float, optional
     |          The desired minimum value to assign for a vertex's Y coordinate. Default is -0.5.
     |      zMin : float, optional
     |          The desired minimum value to assign for a vertex's Z coordinate. Default is -0.5.
     |      xMax : float, optional
     |          The desired maximum value to assign for a vertex's X coordinate. Default is 0.5.
     |      yMax : float, optional
     |          The desired maximum value to assign for a vertex's Y coordinate. Default is 0.5.
     |      zMax : float, optional
     |          The desired maximum value to assign for a vertex's Z coordinate. Default is 0.5.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The created graph.
     |
     |  ByIFCPath(path, includeTypes=[], excludeTypes=[], includeRels=[], excludeRels=[], transferDictionaries=False, useInternalVertex=False, storeBREP=False, removeCoplanarFaces=False, xMin=-0.5, yMin=-0.5, zMin=-0.5, xMax=0.5, yMax=0.5, zMax=0.5)
     |      Create a Graph from an IFC path. This code is partially based on code from Bruno Postle.
     |
     |      Parameters
     |      ----------
     |      path : str
     |          The input IFC file path.
     |      includeTypes : list , optional
     |      excludeTypes : list , optional
     |      includeRels : list , optional
     |      excludeRels : list , optional
     |      transferDictionaries : bool , optional
     |      useInternalVertex : bool , optional
     |      storeBREP : bool , optional
     |          If set to True, store the BRep of the subtopology in its representative vertex. Default is False.
     |      removeCoplanarFaces : bool , optional
     |          If set to True, coplanar faces are removed. Otherwise they are not. Default is False.
     |      xMin : float, optional
     |          The desired minimum value to assign for a vertex's X coordinate. Default is -0.5.
     |      yMin : float, optional
     |          The desired minimum value to assign for a vertex's Y coordinate. Default is -0.5.
     |      zMin : float, optional
     |          The desired minimum value to assign for a vertex's Z coordinate. Default is -0.5.
     |      xMax : float, optional
     |          The desired maximum value to assign for a vertex's X coordinate. Default is 0.5.
     |      yMax : float, optional
     |          The desired maximum value to assign for a vertex's Y coordinate. Default is 0.5.
     |      zMax : float, optional
     |          The desired maximum value to assign for a vertex's Z coordinate. Default is 0.5.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The created graph.
     |
     |  ByMeshData(vertices, edges, vertexDictionaries=None, edgeDictionaries=None, tolerance=0.0001)
     |      Creates a graph from the input mesh data
     |
     |      Parameters
     |      ----------
     |      vertices : list
     |          The list of [x, y, z] coordinates of the vertices/
     |      edges : list
     |      vertexDictionaries : list , optional
     |          The python dictionaries of the vertices (in the same order as the list of vertices).
     |      edgeDictionaries : list , optional
     |          The python dictionaries of the edges (in the same order as the list of edges).
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The created graph
     |
     |      Converts the input NetworkX graph into a topologic Graph. See http://networkx.org
     |
     |      Parameters
     |      ----------
     |      nxGraph : NetworkX graph
     |          The input NetworkX graph.
     |      xKey : str , optional
     |          The dictionary key under which to find the X-Coordinate of the vertex. Default is 'x'.
     |      yKey : str , optional
     |          The dictionary key under which to find the Y-Coordinate of the vertex. Default is 'y'.
     |      zKey : str , optional
     |          The dictionary key under which to find the Z-Coordinate of the vertex. Default is 'z'.
     |      range : tuple , optional
     |          The range to use for position coordinates if no values are found in the dictionaries. Default is (-1,1)
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologicpy.Graph
     |          The created topologic graph.
     |
     |  ByTopology(topology, direct: bool = True, directApertures: bool = False, viaSharedTopologies: bool = False, viaSharedApertures: bool = False, toExteriorTopologies: bool = False, toExteriorApertures: bool = False, toContents: bool = False, toOutposts: bool = False, idKey: str = 'TOPOLOGIC_ID', outpostsKey: str = 'outposts', vertexCategoryKey: str =      |      Creates a graph.See https://en.wikipedia.org/wiki/Graph_(discrete_mathematics).
     |
     |      Parameters
     |      ----------
     |      topology : topologic_core.Topology
     |          The input topology.
     |      direct : bool , optional
     |          If set to True, connect the subtopologies directly with a single edge. Default is True.
     |      directApertures : bool , optional
     |      viaSharedTopologies : bool , optional
     |          If set to True, connect the subtopologies via their shared topologies. Default is False.
     |      viaSharedApertures : bool , optional
     |          If set to True, connect the subtopologies via their shared apertures. Default is False.
     |      toExteriorTopologies : bool , optional
     |          If set to True, connect the subtopologies to their exterior topologies. Default is False.
     |      toExteriorApertures : bool , optional
     |          If set to True, connect the subtopologies to their exterior apertures. Default is False.
     |      toContents : bool , optional
     |          If set to True, connect the subtopologies to their contents. Default is False.
     |      toOutposts : bool , optional
     |          If set to True, connect the topology to the list specified in its outposts. Default is False.
     |      idKey : str , optional
     |          The key to use to find outpost by ID. It is case insensitive. Default is "TOPOLOGIC_ID".
     |      outpostsKey : str , optional
     |          The key to use to find the list of outposts. It is case insensitive. Default is "outposts".
     |      vertexCategoryKey : str , optional
     |          The key under which to store the node type. Node categories are:
     |          0 : main topology
     |          1 : shared topology
     |          2 : shared aperture
     |          3 : exterior topology
     |          4 : exterior aperture
     |          5 : content
     |          6 : outpost
     |          The default is "category".
     |      edgeCategoryKey : str , optional
     |          The key under which to store the node type. Edge categories are:
     |          0 : direct
     |          1 : via shared topology
     |          2 : via shared aperture
     |          3 : to exterior topology
     |          4 : to exterior aperture
     |          5 : to content
     |          6 : to outpost
     |          The default is "category".
     |      useInternalVertex : bool , optional
     |      storeBREP : bool , optional
     |          If set to True, store the BRep of the subtopology in its representative vertex. Default is False.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The created graph.
     |
     |  ByVerticesEdges(vertices, edges)
     |      Creates a graph from the input list of vertices and edges.
     |
     |      Parameters
     |      ----------
     |      vertices : list
     |          The input list of vertices.
     |      edges : list
     |          The input list of edges.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The created graph.
     |
     |  Choice(graph, method: str = 'vertex', weightKey='length', normalize: bool = False, nxCompatible: bool = False, key: str = 'choice', colorKey='ch_color', colorScale='viridis', mantissa: int = 6, tolerance: float = 0.001, silent: bool = False)
     |          This is an alias method for Graph.BetweenessCentrality. Returns the choice (Betweeness Centrality) of the input graph. The order of the returned list is the same as the order of vertices/edges. See https://en.wikipedia.org/wiki/Betweenness_centrality.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      method : str , optional
     |      weightKey : str , optional
     |          the shortest path. If a numeric value cannot be retrieved from an edge, a value of 1 is used instead.
     |      normalize : bool , optional
     |      nxCompatible : bool , optional
     |          If set to True, and normalize input parameter is also set to True, the values are set to be identical to NetworkX values. Otherwise, they are normalized between 0 and 1. Default is False.
     |      key : str , optional
     |      colorKey : str , optional
     |      colorScale : str , optional
     |          The desired type of plotly color scales to use (e.g. "viridis", "plasma"). Default is "viridis". For a full list of names, see https://plotly.com/python/builtin-colorscales/.
     |          In addition to these, three color-blind friendly scales are included. These are "protanopia", "deuteranopia", and "tritanopia" for red, green, and blue colorblindness respectively.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      list
     |
     |  ChromaticNumber(graph, maxColors: int = 3, silent: bool = False)
     |      Returns the chromatic number of the input graph. See https://en.wikipedia.org/wiki/Graph_coloring.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      maxColors : int , optional
     |          The desired maximum number of colors to test against. Default is 3.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      int
     |          The chromatic number of the input graph.
     |
     |  ClosenessCentrality(graph, weightKey: str = 'length', normalize: bool = False, nxCompatible: bool = True, key: str = 'closeness_centrality', colorKey: str = 'cc_color', colorScale: str = 'viridis', mantissa: int = 6, tolerance: float = 0.0001, silent: bool = False)
     |      Returns the closeness centrality of the input graph. The order of the returned
     |      list matches the order of Graph.Vertices(graph).
     |      See: https://en.wikipedia.org/wiki/Closeness_centrality
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      weightKey : str , optional
     |          If specified, this edge attribute will be used as the distance weight when
     |          computing shortest paths. If set to a name containing "Length" or "Distance",
     |          it will be mapped to "length".
     |          Note: Graph.NetworkXGraph automatically provides a "length" attribute on all edges.
     |      normalize : bool , optional
     |          If True, the returned values are rescaled to [0, 1]. Otherwise raw values
     |          from NetworkX (optionally using the improved formula) are returned.
     |      nxCompatible : bool , optional
     |          If True, use NetworkX's wf_improved scaling (Wasserman and Faust).
     |          For single-component graphs it matches the original formula.
     |      key : str , optional
     |          The dictionary key under which to store the closeness centrality score.
     |      colorKey : str , optional
     |          The dictionary key under which to store a color derived from the score.
     |      colorScale : str , optional
     |          Plotly color scale name (e.g., "viridis", "plasma").
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      list[float]
     |          Closeness centrality values for vertices in the same order as Graph.Vertices(graph).
     |
     |  Color(graph, oldKey: str = 'color', key: str = 'color', maxColors: int = None, tolerance: float = 0.0001)
     |      Colors the input vertices within the input graph. The saved value is an integer rather than an actual color. See Color.ByValueInRange to convert to an actual color.--      |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      oldKey : str , optional
     |          The existing dictionary key to use to read any pre-existing color information. Default is "color".
     |      key : str , optional
     |          The new dictionary key to use to write out new color information. Default is "color".
     |      maxColors : int , optional
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The input graph, but with its vertices colored.
     |
     |  Community(graph, key: str = 'partition', mantissa: int = 6, tolerance: float = 0.0001, silent: bool = False)
     |
     |      Parameters
     |      ----------
     |      graph : topologicp.Graph
     |          The input topologic graph.
     |      key : str , optional
     |          The dictionary key under which to store the partition number. Default is "partition".
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |              If set to True, error and warning messages are suppressed. Default is False.
     |      Returns
     |      -------
     |      topologicpy.Graph
     |          The partitioned topologic graph.
     |
     |
     |      Parameters
     |      ----------
     |      graph : topologicp.Graph
     |          The input topologic graph.
     |      key : str , optional
     |          The dictionary key under which to store the partition number. Default is "partition".
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |              If set to True, error and warning messages are suppressed. Default is False.
     |      Returns
     |      -------
     |      topologicpy.Graph
     |          The partitioned topologic graph.
     |
     |  Compare(graphA, graphB, weightAccessibilityCentrality: float = 0.0, weightAttributes: float = 0.0, weightGeometry: float = 0.0, weightBetwennessCentrality: float = 0.0, weightClosenessCentrality: float = 0.0, weightDegreeCentrality: float = 0.0, weightDiameter: float = 0.0, weightEigenVectorCentrality: float = 0.0, weightGlobalClusteringCoefficient: float = 0.0, weightHopper: float = 0.0, weightJaccard: float = 0.0, weightPageRank: float = 0.0, weightStructure: float = 0.0, weightWeisfeilerLehman: float = 0.0, vertexIDKey: str = 'id', edgeWeightKey: str = None, wlKey: str = None, hopperKey: str = None, iterations: int = 2, maxHops: int = 2, decay: float = 0.5, mantissa: int = 6, silent: bool = False)
     |      Compares two graphs and returns a similarity score based on attributres, geometry, metrics, structure,
     |      , and the weight Jaccard Similarity. See https://www.statology.org/jaccard-similarity/
     |
     |      Parameters
     |      ----------
     |      graphA : topologic Graph
     |          The first input graph.
     |      graphB : topologic Graph
     |          The second input graph.
     |      weightAccessibilityCentrality : float , optional
     |          The desired weight for degree accessibility similarity (graph-level and node-level). Default is 0.0.
     |      weightAttributes : float , optional
     |          The desired weight for attribute similarity (dictionary key overlap at vertices). Default is 0.0.
     |      weightBetwennessCentrality : float , optional
     |          The desired weight for betweenness centrality similarity (graph-level and node-level). Default is 0.0.
     |      weightClosenessCentrality : float , optional
     |          The desired weight for closeness centrality similarity (graph-level and node-level). Default is 0.0.
     |      weightDegreeCentrality : float , optional
     |          The desired weight for degree centrality similarity (graph-level and node-level). Default is 0.0.
     |      weightDiameter : float , optional
     |          The desired weight for diameter similarity (graph-level and node-level). Default is 0.0.
     |      weightEigenVectorCentrality : float , optional
     |          The desired weight for eigenvector centrality similarity (graph-level and node-level). Default is 0.0.
     |      weightGeometry : float , optional
     |          The desired weight for geometric similarity (vertex positions). Default is 0.0.
     |      weightGlobalClusteringCoefficient : float , optional
     |      weightHopper : float , optional
     |          The desired weight for Hopper kernel similarity. Default is 0.0.
     |      weightJaccard: float , optional
     |          The desired weight for the Weighted Jaccard similarity. Default is 0.0.
     |      weightPageRank : float , optional
     |          The desired weight for PageRank similarity (graph-level and node-level). Default is 0.0.
     |      weightStructure : float , optional
     |          The desired weight for structural similarity (number of vertices and edges). Default is 0.0.
     |      weightWeisfeilerLehman : float , optional
     |      vertexIDKey: str , optional
     |          The dictionary key under which to find the unique vertex ID. Default is "id".
     |      edgeWeightKey: str , optional
     |          The dictionary key under which to find the weight of the edge for weighted graphs.
     |          The default is None which means all edges are treated as if they have a weight of 1.
     |      wlKey: str , optional
     |      hopperKey: str , optional
     |      iterations : int , optional
     |          WL kernel-specific parameter: The desired number of Weisfeiler-Lehman kernel iterations. Default is 2.
     |      maxHops : int , optional
     |          Hopper kernel-specific parameter: The maximum shortest-path hop distance to consider. Default is 3.
     |      decay : float , optional
     |          Hopper kernel-specific parameter: A per-hop geometric decay factor in the range (0, 1]. Default is 0.5.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      dict
     |          The keys in the dictionary are:
     |          "accessibility_centrality"
     |          "attribute"
     |          "betwenness_centrality"
     |          "closeness_centrality"
     |          "degree_centrality"
     |          "eigenvector_centrality"
     |          "geometry"
     |          "global_clustering_coefficient"
     |          "hopper"
     |          "jaccard"
     |          "pagerank"
     |          "structure"
     |          "weisfeiler_lehman"
     |          "overall"
     |
     |  Complement(graph, tolerance=0.0001, silent=False)
     |      Creates the complement graph of the input graph. See https://en.wikipedia.org/wiki/Complement_graph
     |
     |      Parameters
     |      ----------
     |      graph : topologicpy.Graph
     |          The input topologic graph.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |              If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologicpy.Graph
     |          The created complement topologic graph.
     |
     |  Complete(graph, silent: bool = False)
     |      Completes the graph by conneting unconnected vertices.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologicpy.Graph
     |          the completed graph
     |
     |  Connect(graph, verticesA, verticesB, tolerance=0.0001)
     |      Connects the two lists of input vertices.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      verticesA : list
     |          The first list of input vertices.
     |      verticesB : topologic_core.Vertex
     |          The second list of input vertices.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The input graph with the connected input vertices.
     |
     |  ConnectedComponents(graph, key: str = 'component', tolerance: float = 0.0001, silent: bool = False)
     |      Returns the connected components (islands) of the input graph.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      key : str , optional
     |          The vertex and edge dictionary key under which to store the component number. Default is "component".
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      list
     |          The list of connected components (island graphs).
     |          The list is sorted by the number of vertices in each component (from highest to lowest).
     |
     |  Connectivity(graph, vertices=None, weightKey: str = None, normalize: bool = False, key: str = 'connectivity', colorKey: str = 'cn_color', colorScale='Viridis', mantissa: int = 6, tolerance=0.0001, silent=False)
     |      This is an alias method for Graph.DegreeCentrality. Return the connectivity measure of the input list of vertices within the input graph. The order of the returned list is the same as the order of the input list of vertices. If no vertices are specified, the connectivity of all the vertices in the input graph is computed. See https://www.spacesyntax.online/term/connectivity/.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertices : list , optional
     |          The input list of vertices. Default is None which means all graph vertices are computed.
     |      normalize : bool , optional
     |      weightKey : str , optional
     |          the vertex degree. If a numeric value cannot be retrieved from an edge, a value of 1 is used instead.
     |      key : str , optional
     |          The dictionary key under which to store the connectivity score. Default is "connectivity".
     |      colorKey : str , optional
     |          The desired dictionary key under which to store the connectivity color. Default is "cn_color".
     |      colorScale : str , optional
     |          The desired type of plotly color scales to use (e.g. "viridis", "plasma"). Default is "viridis". For a full list of names, see https://plotly.com/python/builtin-colorscales/.
     |          In addition to these, three color-blind friendly scales are included. These are "protanopia", "deuteranopia", and "tritanopia" for red, green, and blue colorblindness respectively.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      list
     |
     |  ContainsEdge(graph, edge, tolerance=0.0001)
     |      Returns True if the input graph contains the input edge. Returns False otherwise.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      edge : topologic_core.Edge
     |          The input edge.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      bool
     |          True if the input graph contains the input edge. False otherwise.
     |
     |  ContainsVertex(graph, vertex, tolerance=0.0001)
     |      Returns True if the input graph contains the input Vertex. Returns False otherwise.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertex : topologic_core.Vertex
     |          The input Vertex.
     |      tolerance : float , optional
     |          Ther desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      bool
     |          True if the input graph contains the input vertex. False otherwise.
     |
     |  ContractEdge(graph, edge, vertex=None, tolerance=0.0001)
     |      vertex that replaces it. See https://en.wikipedia.org/wiki/Edge_contraction
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      edge : topologic_core.Edge
     |          The input graph edge that needs to be contracted.
     |      vertex : topollogic.Vertex , optional
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The input graph, but with input edge contracted into a single vertex.
     |
     |  CutVertices(graph, key: str = 'cut', silent: bool = False)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      key : str , optional
     |          The vertex dictionary key under which to store the cut status. 0 means the vertex is NOT a cut vertex. 1 means that the vertex IS a cut vertex. Default is "cut".--     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      list
     |          The list of bridge edges in the input graph.
     |
     |  DegreeCentrality(graph, vertices: list = None, weightKey: str = None, normalize: bool = False, key: str = 'degree_centrality', colorKey='dc_color', colorScale='viridis', mantissa: int = 6, tolerance: float = 0.001, silent: bool = False)
     |       Returns the degree centrality of the input graph. The order of the returned list is the same as the order of vertices. See https://en.wikipedia.org/wiki/Degree_centrality.
     |
     |       Parameters
     |       ----------
     |       graph : topologic_core.Graph
     |           The input graph.
     |       weightKey : str , optional
     |           the vertex degree. If a numeric value cannot be retrieved from an edge, a value of 1 is used instead.
     |      normalize : bool , optional
     |       key : str , optional
     |       colorKey : str , optional
     |           The desired dictionary key under which to store the degree centrality color. Default is "dc_color".
     |       colorScale : str , optional
     |           The desired type of plotly color scales to use (e.g. "viridis", "plasma"). Default is "viridis". For a full list of names, see https://plotly.com/python/builtin-colorscales/.
     |           In addition to these, three color-blind friendly scales are included. These are "protanopia", "deuteranopia", and "tritanopia" for red, green, and blue colorblindness respectively.
     |       mantissa : int , optional
     |           The number of decimal places to round the result to. Default is 6.
     |       tolerance : float , optional
     |           The desired tolerance. Default is 0.0001.
     |
     |       Returns
     |       -------
     |       list
     |
     |  DegreeMatrix(graph)
     |      Returns the degree matrix of the input graph. See https://en.wikipedia.org/wiki/Degree_matrix.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |
     |      Returns
     |      -------
     |      list
     |          The degree matrix of the input graph.
     |
     |  DegreeSequence(graph)
     |      Returns the degree sequence of the input graph. See https://mathworld.wolfram.com/DegreeSequence.html.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |
     |      Returns
     |      -------
     |      list
     |          The degree sequence of the input graph.
     |
     |  Density(graph)
     |      Returns the density of the input graph. See https://en.wikipedia.org/wiki/Dense_graph.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |
     |      Returns
     |      -------
     |      float
     |          The density of the input graph.
     |
     |  Depth(graph, vertex=None, tolerance: float = 0.0001, silent: bool = False)
     |      Computes the maximum depth of the input graph rooted at the input vertex.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertex : topologic_core.Vertex , optional
     |      tolerance : float , optional
     |              The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      int
     |          The calculated maximum depth of the input graph rooted at the input vertex.
     |
     |      Return the depth map of the input list of vertices within the input graph. The returned list contains the total of the topological distances of each vertex to every other vertex in the input graph. The order of the depth map list is the same as the order of the input list of vertices. If no vertices are specified, the depth map of all the vertices in the input graph is computed.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertices : list , optional
     |          The input list of vertices. Default is None.
     |      key : str , optional
     |          The dictionary key under which to store the depth score. Default is "depth".
     |      type : str , optional
     |          The type of depth distance to calculate. The options are "topological" or "metric". Default is "topological". See https://www.spacesyntax.online/overview-2/analysis-of-spatial-relations/.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      list
     |          The depth map of the input list of vertices within the input graph.
     |
     |  Diameter(graph)
     |      Returns the diameter of the input graph. See https://mathworld.wolfram.com/GraphDiameter.html.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |
     |      Returns
     |      -------
     |      int
     |          The diameter of the input graph.
     |
     |  Dictionary(graph)
     |      Returns the dictionary of the input graph.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |
     |      Returns
     |      -------
     |      topologic_core.Dictionary
     |          The dictionary of the input graph.
     |
     |
     |      Parameters
     |      ----------
     |      graphA : topologic_core.Graph
     |          The first input graph.
     |      graphB : topologic_core.Graph
     |          The second input graph.
     |      vertexKeys : list or str , optional
     |          The vertex dictionary key (str) or keys (list of str) to use to determine if two vertices are the same.
     |          vertices (within the tolerance) will be used to determine sameness. Default is None.
     |      useCentroid : bool , optional
     |          This is not used here, but included for API consistency for boolean operations.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          the resultant graph. Vertex and edge dictionaries are not merged.
     |
     |  Distance(graph, vertexA, vertexB, type: str = 'topological', mantissa: int = 6, tolerance: float = 0.0001)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexA : topologic_core.Vertex
     |          The first input vertex.
     |      vertexB : topologic_core.Vertex
     |          The second input vertex.
     |      type : str , optional
     |          The type of depth distance to calculate. The options are "topological" or "metric". Default is "topological". See https://www.spacesyntax.online/overview-2/analysis-of-spatial-relations/.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      float
     |          The shortest-path metric distance between the input vertices.
     |
     |  Edge(graph, vertexA, vertexB, tolerance=0.0001)
     |      Returns the edge in the input graph that connects in the input vertices.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexA : topologic_core.Vertex
     |          The first input vertex.
     |      vertexB : topologic_core.Vertex
     |          The second input Vertex.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Edge
     |          The edge in the input graph that connects the input vertices.
     |
     |  Edges(graph, vertices=None, tolerance=0.0001)
     |      Returns the edges found in the input graph. If the input list of vertices is specified, this method returns the edges connected to this list of vertices. Otherwise, it returns all graph edges.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertices : list , optional
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      list
     |          The list of edges in the graph.
     |
     |  EigenVectorCentrality(graph, normalize: bool = False, key: str = 'eigen_vector_centrality', colorKey: str = 'evc_color', colorScale: str = 'viridis', mantissa: int = 6, tolerance: float = 0.0001, silent: bool = False)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      weightKey : str, optional
     |          Ignored in this implementation. Reserved for future use if weighted adjacency matrix is desired.
     |      normalize : bool, optional
     |          If set to True, the centrality values are normalized to be in the range 0 to 1. Default is False.
     |      key : str, optional
     |      colorKey : str, optional
     |      colorScale : str, optional
     |          The desired type of Plotly color scale to use (e.g., "viridis", "plasma"). Default is "viridis".
     |          For a full list of names, see https://plotly.com/python/builtin-colorscales/.
     |          Also supports color-blind friendly scales: "protanopia", "deuteranopia", "tritanopia".
     |      mantissa : int, optional
     |          The desired length of the mantissa. Default is 6.
     |      tolerance : float, optional
     |          The convergence tolerance for the power method. Default is 0.0001.
     |      silent : bool, optional
     |          If set to True, suppresses all messaging and warnings. Default is False.
     |
     |      Returns
     |      -------
     |      list
     |          A list of eigenvector centrality values corresponding to the vertices in the input graph.
     |
     |  ExportToAdjacencyMatrixCSV(adjacencyMatrix, path)
     |      Exports the input graph into a set of CSV files compatible with DGL.
     |
     |      Parameters
     |      ----------
     |      adjacencyMatrix: list
     |          The input adjacency matrix.
     |      path : str
     |          The desired path to the output folder where the graphs, edges, and nodes CSV files will be saved.
     |
     |      Returns
     |      -------
     |      bool
     |          True if the graph has been successfully exported. False otherwise.
     |
     |  ExportToBOT(graph, path: str, format: str = 'turtle', overwrite: bool = False, bidirectional: bool = False, includeAttributes: bool = False, includeLabel: bool = False, includeGeometry: bool = False, siteLabel: str = 'Site_0001', siteDictionary: dict = None, buildingLabel: str = 'Building_0001', buildingDictionary: dict = None, storeyPrefix: str = 'Storey', floorLevels: list = [], vertexLabelKey: str = 'label', typeKey: str = 'type', verticesKey: str = 'vertices', edgesKey: str = 'edges', edgeLabelKey: str = '', sourceKey: str = 'source', targetKey: str = 'target', xKey: str = 'hasX', yKey: str = 'hasY', zKey: str = 'hasZ', geometryKey: str = 'brep', spaceType: str = 'space', wallType: str = 'wall', slabType: str = 'slab', doorType: str = 'door', windowType: str = 'window', contentType: str = 'content', namespace: str = 'http://github.com/wassimj/topologicpy/resources', mantissa: int = 6)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      path : str
     |          The desired path to where the RDF/BOT file will be saved.
     |      format : str , optional
     |          The desired output format, the options are listed below. Thde default is "turtle".
     |          turtle, ttl or turtle2 : Turtle, turtle2 is just turtle with more spacing & linebreaks
     |          xml or pretty-xml : RDF/XML, Was the default format, rdflib < 6.0.0
     |          json-ld : JSON-LD , There are further options for compact syntax and other JSON-LD variants
     |          ntriples, nt or nt11 : N-Triples , nt11 is exactly like nt, only utf8 encoded
     |          n3 : Notation-3 , N3 is a superset of Turtle that also caters for rules and a few other things
     |          trig : Trig , Turtle-like format for RDF triples + context (RDF quads) and thus multiple graphs
     |          trix : Trix , RDF/XML-like format for RDF quads
     |          nquads : N-Quads , N-Triples-like format for RDF quads
     |      overwrite : bool , optional
     |          If set to True, any existing file is overwritten. Otherwise, it is not. Default is False.
     |      bidirectional : bool , optional
     |      includeAttributes : bool , optional
     |      includeLabel : bool , optional
     |          If set to True, a label is attached to each node. Otherwise, it is not. Default is False.
     |      includeGeometry : bool , optional
     |      siteLabel : str , optional
     |          The desired site label. Default is "Site_0001".
     |      siteDictionary : dict , optional
     |          The dictionary of site attributes to include in the output. Default is None.
     |      buildingLabel : str , optional
     |          The desired building label. Default is "Building_0001".
     |      buildingDictionary : dict , optional
     |          The dictionary of building attributes to include in the output. Default is None.
     |      storeyPrefix : str , optional
     |          The desired prefixed to use for each building storey. Default is "Storey".
     |      floorLevels : list , optional
     |          The list of floor levels. This should be a numeric list, sorted from lowest to highest.
     |      verticesKey : str , optional
     |          The desired key name to call vertices. Default is "vertices".
     |      edgesKey : str , optional
     |          The desired key name to call edges. Default is "edges".
     |      vertexLabelKey : str , optional
     |          If set to a valid string, the vertex label will be set to the value at this key. Otherwise it will be set to Vertex_XXXX where XXXX is a sequential unique number.-     |          Note: If vertex labels are not unique, they will be forced to be unique.
     |      edgeLabelKey : str , optional
     |          If set to a valid string, the edge label will be set to the value at this key. Otherwise it will be set to Edge_XXXX where XXXX is a sequential unique number.-- Mo     |          Note: If edge labels are not unique, they will be forced to be unique.
     |      sourceKey : str , optional
     |          The dictionary key used to store the source vertex. Default is "source".
     |      targetKey : str , optional
     |          The dictionary key used to store the target vertex. Default is "target".
     |      xKey : str , optional
     |          The desired key name to use for x-coordinates. Default is "hasX".
     |      yKey : str , optional
     |          The desired key name to use for y-coordinates. Default is "hasY".
     |      zKey : str , optional
     |          The desired key name to use for z-coordinates. Default is "hasZ".
     |      geometryKey : str , optional
     |          The desired key name to use for geometry. Default is "brep".
     |      typeKey : str , optional
     |          The dictionary key to use to look up the type of the node. Default is "type".
     |      geometryKey : str , optional
     |          The dictionary key to use to look up the geometry of the node. Default is "brep".
     |      spaceType : str , optional
     |          The dictionary string value to use to look up vertices of type "space". Default is "space".
     |      wallType : str , optional
     |          The dictionary string value to use to look up vertices of type "wall". Default is "wall".
     |      slabType : str , optional
     |          The dictionary string value to use to look up vertices of type "slab". Default is "slab".
     |      doorType : str , optional
     |          The dictionary string value to use to look up vertices of type "door". Default is "door".
     |      windowType : str , optional
     |          The dictionary string value to use to look up vertices of type "window". Default is "window".
     |      contentType : str , optional
     |          The dictionary string value to use to look up vertices of type "content". Default is "contents".
     |      namespace : str , optional
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |
     |      Returns
     |      -------
     |      str
     |          The rdf graph serialized string using the BOT ontology.
     |
     |  ExportToCSV(graph, path, graphLabel, graphFeatures='', graphIDHeader='graph_id', graphLabelHeader='label', graphFeaturesHeader='feat', edgeLabelKey='label', defaultEdgeLabel=0, edgeFeaturesKeys=[], edgeSRCHeader='src_id', edgeDSTHeader='dst_id', edgeLabelHeader='label', edgeFeaturesHeader='feat', edgeTrainMaskHeader='train_mask', edgeValidateMaskHeader='val_mask', edgeTestMaskHeader='test_mask', edgeMaskKey='mask', edgeTrainRatio=0.8, edgeValidateRatio=0.1, edgeTestRatio=0.1, bidirectional=True, nodeLabelKey='label', defaultNodeLabel=0, nodeFeaturesKeys=[], nodeIDHeader='node_id', nodeLabelHeader='label', nodeFeaturesHeader='feat', nodeTrainMaskHeader='train_mask', nodeValidateMaskHeader='val_mask',     |      Exports the input graph into a set of CSV files compatible with DGL.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph
     |      path : str
     |          The desired path to the output folder where the graphs, edges, and nodes CSV files will be saved.
     |      graphLabel : float or int
     |          The input graph label. This can be an int (categorical) or a float (continous)
     |      graphFeatures : str , optional
     |      graphIDHeader : str , optional
     |          The desired graph ID column header. Default is "graph_id".
     |      graphLabelHeader : str , optional
     |          The desired graph label column header. Default is "label".
     |      graphFeaturesHeader : str , optional
     |          The desired graph features column header. Default is "feat".
     |      edgeLabelKey : str , optional
     |          The edge label dictionary key saved in each graph edge. Default is "label".
     |      defaultEdgeLabel : int , optional
     |          The default edge label to use if no edge label is found. Default is 0.
     |      edgeLabelHeader : str , optional
     |          The desired edge label column header. Default is "label".
     |      edgeSRCHeader : str , optional
     |          The desired edge source column header. Default is "src_id".
     |      edgeDSTHeader : str , optional
     |          The desired edge destination column header. Default is "dst_id".
     |      edgeFeaturesHeader : str , optional
     |          The desired edge features column header. Default is "feat".
     |      edgeFeaturesKeys : list , optional
     |          The list of feature dictionary keys saved in the dicitonaries of edges. Default is [].
     |      edgeTrainMaskHeader : str , optional
     |          The desired edge train mask column header. Default is "train_mask".
     |      edgeValidateMaskHeader : str , optional
     |          The desired edge validate mask column header. Default is "val_mask".
     |      edgeTestMaskHeader : str , optional
     |          The desired edge test mask column header. Default is "test_mask".
     |      edgeMaskKey : str , optional
     |      edgeTrainRatio : float , optional
     |          The desired ratio of the edge data to use for training. The number must be between 0 and 1. Default is 0.8 which means 80% of the data will be used for training.--     |          This value is ignored if an edgeMaskKey is foud.
     |      edgeValidateRatio : float , optional
     |          The desired ratio of the edge data to use for validation. The number must be between 0 and 1. Default is 0.1 which means 10% of the data will be used for validation.
     |          This value is ignored if an edgeMaskKey is foud.
     |      edgeTestRatio : float , optional
     |          The desired ratio of the edge data to use for testing. The number must be between 0 and 1. Default is 0.1 which means 10% of the data will be used for testing.-- M     |          This value is ignored if an edgeMaskKey is foud.
     |      bidirectional : bool , optional
     |      nodeFeaturesKeys : list , optional
     |          The list of features keys saved in the dicitonaries of nodes. Default is [].
     |      nodeLabelKey : str , optional
     |          The node label dictionary key saved in each graph vertex. Default is "label".
     |      defaultNodeLabel : int , optional
     |          The default node label to use if no node label is found. Default is 0.
     |      nodeIDHeader : str , optional
     |          The desired node ID column header. Default is "node_id".
     |      nodeLabelHeader : str , optional
     |          The desired node label column header. Default is "label".
     |      nodeFeaturesHeader : str , optional
     |          The desired node features column header. Default is "feat".
     |      nodeTrainMaskHeader : str , optional
     |          The desired node train mask column header. Default is "train_mask".
     |      nodeValidateMaskHeader : str , optional
     |          The desired node validate mask column header. Default is "val_mask".
     |      nodeTestMaskHeader : str , optional
     |          The desired node test mask column header. Default is "test_mask".
     |      nodeMaskKey : str , optional
     |      nodeTrainRatio : float , optional
     |          The desired ratio of the node data to use for training. The number must be between 0 and 1. Default is 0.8 which means 80% of the data will be used for training.--     |          This value is ignored if an nodeMaskKey is foud.
     |      nodeValidateRatio : float , optional
     |          The desired ratio of the node data to use for validation. The number must be between 0 and 1. Default is 0.1 which means 10% of the data will be used for validation.
     |          This value is ignored if an nodeMaskKey is foud.
     |      nodeTestRatio : float , optional
     |          The desired ratio of the node data to use for testing. The number must be between 0 and 1. Default is 0.1 which means 10% of the data will be used for testing.-- M     |          This value is ignored if an nodeMaskKey is foud.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      overwrite : bool , optional
     |
     |      Returns
     |      -------
     |      bool
     |          True if the graph has been successfully exported. False otherwise.
     |
     |  ExportToGEXF(graph, path: str = None, graphWidth: float = 20, graphLength: float = 20, graphHeight: float = 20, defaultVertexColor: str = 'black', defaultVertexSize: float = 3, vertexLabelKey: str = None, vertexColorKey: str = None, vertexSizeKey: str = None, defaultEdgeColor: str = 'black', defaultEdgeWeight: float = 1, defaultEdgeType: str = 'und     |      Exports the input graph to a Graph Exchange XML (GEXF) file format. See https://gexf.net/
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph
     |      path : str
     |          The desired path to the output folder where the graphs, edges, and nodes CSV files will be saved.
     |      graphWidth : float or int , optional
     |          The desired graph width. Default is 20.
     |      graphLength : float or int , optional
     |          The desired graph length. Default is 20.
     |      graphHeight : float or int , optional
     |          The desired graph height. Default is 20.
     |      defaultVertexColor : str , optional
     |          The desired default vertex color. Default is "black".
     |      defaultVertexSize : float or int , optional
     |          The desired default vertex size. Default is 3.
     |      defaultEdgeColor : str , optional
     |          The desired default edge color. Default is "black".
     |      defaultEdgeWeight : float or int , optional
     |      defaultEdgeType : str , optional
     |          The desired default edge type. This can be one of "directed" or "undirected". Default is "undirected".
     |      vertexLabelKey : str , optional
     |          the vertex label being is set to "Node X" where is X is a unique number. Default is None.
     |      vertexColorKey : str , optional
     |          the vertex color is set to the value defined by defaultVertexColor parameter. Default is None.
     |      vertexSizeKey : str , optional
     |          the vertex size is set to the value defined by defaultVertexSize parameter. Default is None.
     |      edgeLabelKey : str , optional
     |          the edge label being is set to "Edge X" where is X is a unique number. Default is None.
     |      edgeColorKey : str , optional
     |          the edge color is set to the value defined by defaultEdgeColor parameter. Default is None.
     |      edgeWeightKey : str , optional
     |          the edge weight is set to the value defined by defaultEdgeWeight parameter. Default is None.
     |      overwrite : bool , optional
     |          If set to True, any existing file is overwritten. Otherwise, it is not. Default is False.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      bool
     |          True if the graph has been successfully exported. False otherwise.
     |
     |  ExportToGraphVizGraph(graph, path, device='svg_inline', deviceKey=None, scale=1, scaleKey=None, directed=False, directedKey=None, layout='dot', layoutKey=None, rankDir='TB', rankDirKey=None, bgColor='white', bgColorKey=None, fontName='Arial', fontNameKey=None, fontSize=12, fontSizeKey=None, vertexSep=0.5, vertexSepKey=None, rankSep=0.5, rankSepKey=None, splines='True', splinesKey=None, showGraphLabel=False, graphLabel='', graphLabelKey=None, graphLabelLoc='t', graphLabelLocKey=None, showVertexLabel=False, vertexLabelPrefix='', vertexLabelKey=None, vertexWidth=0.5, vertexWidthKey=None, vertexHeight=0.5, vertexHeightKey=None, vertexFixedSize=False, vertexFixedSizeKey=None, vertexShape='circle', vertexShapeKey=None, vertexStyle='filled', vertexStyleKey=None, vertexFillColor='lightgray', vertexFillColorKey=None, vertexColor='black', vertexColorKey=None, vertexFontColor='black', vertexFontColorKey=None, showEdgeLabel=False, edgeLabelPrefix='', edgeLabelKey=None, edgeColor='black', edgeColorKey=None, edgeWidth=1, edgeWidthKey=None, edgeStyle='solid', edgeS     |      Exports the input graph to a GraphViz `.gv` (dot) file.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      path : str
     |          The path to the output file (e.g., "output.gv").
     |      device : str, optional
     |          The output format device, such as 'svg_inline', 'pdf', or 'png'. Default is 'svg_inline'.
     |      deviceKey : str, optional
     |          Dictionary key to override the `device` value. Default is None.
     |      scale : float, optional
     |          Global scaling factor. Default is 1.
     |      scaleKey : str, optional
     |          Dictionary key to override the `scale` per-graph. Default is None.
     |      directed : bool, optional
     |          Whether to treat the graph as directed. Default is False.
     |      directedKey : str, optional
     |          Dictionary key to override the `directed` flag per-graph. Default is None.
     |      layout : str, optional
     |      layoutKey : str, optional
     |          Dictionary key to override the `layout` per-graph. Default is None.
     |      rankDir : str, optional
     |          Direction of graph ranking. Options: 'TB' (top-bottom), 'LR' (left-right), 'RL', 'BT'. Default is 'TB'.
     |      rankDirKey : str, optional
     |          Dictionary key to override `rankDir` per-graph. Default is None.
     |      bgColor : str, optional
     |          Background color. Default is 'white'.
     |      bgColorKey : str, optional
     |          Dictionary key to override `bgColor`. Default is None.
     |      fontName : str, optional
     |          Name of the font to use for all text. Default is 'Arial'.
     |      fontNameKey : str, optional
     |          Dictionary key to override `fontName`. Default is None.
     |      fontSize : int or float, optional
     |          Size of font in points. Default is 12.
     |      fontSizeKey : str, optional
     |          Dictionary key to override `fontSize`. Default is None.
     |      vertexSep : float, optional
     |          Minimum separation between vertices. Default is 0.5.
     |      vertexSepKey : str, optional
     |          Dictionary key to override `vertexSep`. Default is None.
     |      rankSep : float, optional
     |          Separation between ranks. Default is 0.5.
     |      rankSepKey : str, optional
     |          Dictionary key to override `rankSep`. Default is None.
     |      splines : str, optional
     |          Whether to use spline edges. Can be 'true', 'false', or 'polyline'. Default is 'True'.
     |      splinesKey : str, optional
     |          Dictionary key to override `splines`. Default is None.
     |      showGraphLabel : bool, optional
     |          Whether to show a label for the whole graph. Default is False.
     |      graphLabel : str, optional
     |          Text for the graph label. Default is an empty string.
     |      graphLabelKey : str, optional
     |          Dictionary key to override `graphLabel`. Default is None.
     |      graphLabelLoc : str, optional
     |          Position of the graph label: 't' (top), 'b' (bottom), 'c' (center). Default is 't'.
     |      graphLabelLocKey : str, optional
     |          Dictionary key to override `graphLabelLoc`. Default is None.
     |      showVertexLabel : bool, optional
     |          Whether to display vertex labels. Default is False.
     |      vertexLabelPrefix : str, optional
     |          Text prefix for vertex labels. Default is empty string.
     |      vertexLabelKey : str, optional
     |          Dictionary key used to retrieve label text from vertex dictionary. Default is None.
     |      vertexWidth : float, optional
     |          Width of each vertex. Default is 0.5.
     |      vertexWidthKey : str, optional
     |          Dictionary key to override `vertexWidth`. Default is None.
     |      vertexHeight : float, optional
     |          Height of each vertex. Default is 0.5.
     |      vertexHeightKey : str, optional
     |          Dictionary key to override `vertexHeight`. Default is None.
     |      vertexFixedSize : bool, optional
     |          Whether vertices should be fixed in size. Default is False.
     |      vertexFixedSizeKey : str, optional
     |          Dictionary key to override `vertexFixedSize`. Default is None.
     |      vertexShape : str, optional
     |          Shape of the vertex ('circle', 'ellipse', 'box', etc.). Default is 'circle'.
     |      vertexShapeKey : str, optional
     |          Dictionary key to override `vertexShape`. Default is None.
     |      vertexStyle : str, optional
     |          Style of vertex (e.g., 'filled', 'dashed'). Default is 'filled'.
     |      vertexStyleKey : str, optional
     |          Dictionary key to override `vertexStyle`. Default is None.
     |      vertexFillColor : str, optional
     |          Fill color for vertices. Default is 'lightgray'.
     |      vertexFillColorKey : str, optional
     |          Dictionary key to override `vertexFillColor`. Default is None.
     |      vertexColor : str, optional
     |          Border color for vertices. Default is 'black'.
     |      vertexColorKey : str, optional
     |          Dictionary key to override `vertexColor`. Default is None.
     |      vertexFontColor : str, optional
     |          Font color for vertex labels. Default is 'black'.
     |      vertexFontColorKey : str, optional
     |          Dictionary key to override `vertexFontColor`. Default is None.
     |      showEdgeLabel : bool, optional
     |          Whether to display edge labels. Default is False.
     |      edgeLabelPrefix : str, optional
     |          Text prefix for edge labels. Default is empty string.
     |      edgeLabelKey : str, optional
     |          Dictionary key used to retrieve label text from edge dictionary. Default is None.
     |      edgeColor : str, optional
     |          Color of edges. Default is 'black'.
     |      edgeColorKey : str, optional
     |          Dictionary key to override `edgeColor`. Default is None.
     |      edgeWidth : float, optional
     |          Width (thickness) of edges. Default is 1.
     |      edgeWidthKey : str, optional
     |          Dictionary key to override `edgeWidth`. Default is None.
     |      edgeStyle : str, optional
     |          Style of the edge line (e.g., 'solid', 'dashed'). Default is 'solid'.
     |      edgeStyleKey : str, optional
     |          Dictionary key to override `edgeStyle`. Default is None.
     |      edgeArrowhead : str, optional
     |          Arrowhead style for directed edges. Default is 'normal'.
     |      edgeArrowheadKey : str, optional
     |          Dictionary key to override `edgeArrowhead`. Default is None.
     |      edgeFontColor : str, optional
     |          Font color for edge labels. Default is 'black'.
     |      edgeFontColorKey : str, optional
     |          Dictionary key to override `edgeFontColor`. Default is None.
     |      overwrite : bool, optional
     |          If True, overwrites existing files at the given path. Default is False.
     |      silent : bool, optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      bool
     |          True if the graph was successfully exported. False otherwise.
     |
     |  ExportToJSON(graph, path, verticesKey='vertices', edgesKey='edges', vertexLabelKey='', edgeLabelKey='', xKey='x', yKey='y', zKey='z', indent=4, sortKeys=False, mantissa=6, overwrite=False)
     |      Exports the input graph to a JSON file.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      path : str
     |          The path to the JSON file.
     |      verticesKey : str , optional
     |          The desired key name to call vertices. Default is "vertices".
     |      edgesKey : str , optional
     |          The desired key name to call edges. Default is "edges".
     |      vertexLabelKey : str , optional
     |          If set to a valid string, the vertex label will be set to the value at this key. Otherwise it will be set to Vertex_XXXX where XXXX is a sequential unique number.-     |          Note: If vertex labels are not unique, they will be forced to be unique.
     |      edgeLabelKey : str , optional
     |          If set to a valid string, the edge label will be set to the value at this key. Otherwise it will be set to Edge_XXXX where XXXX is a sequential unique number.-- Mo     |          Note: If edge labels are not unique, they will be forced to be unique.
     |      xKey : str , optional
     |          The desired key name to use for x-coordinates. Default is "x".
     |      yKey : str , optional
     |          The desired key name to use for y-coordinates. Default is "y".
     |      zKey : str , optional
     |          The desired key name to use for z-coordinates. Default is "z".
     |      indent : int , optional
     |          The desired amount of indent spaces to use. Default is 4.
     |      sortKeys : bool , optional
     |          If set to True, the keys will be sorted. Otherwise, they won't be. Default is False.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      overwrite : bool , optional
     |
     |      Returns
     |      -------
     |      bool
     |
     |  ExportToJSONLD(graph, path, context=None, verticesKey='nodes', edgesKey='edges', labelKey='label', sourceKey='source', targetKey='target', categoryKey='category', xKey='x', yKey='y', zKey='z', indent=2, sortKeys=False, mantissa=6, overwrite=False)
     |      Exports the input graph to a JSON file.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      path : str
     |          The path to the JSON file.
     |      verticesKey : str , optional
     |          The desired key name to call vertices. Default is "vertices".
     |      edgesKey : str , optional
     |          The desired key name to call edges. Default is "edges".
     |      vertexLabelKey : str , optional
     |          If set to a valid string, the vertex label will be set to the value at this key. Otherwise it will be set to Vertex_XXXX where XXXX is a sequential unique number.-     |          Note: If vertex labels are not unique, they will be forced to be unique.
     |      edgeLabelKey : str , optional
     |          If set to a valid string, the edge label will be set to the value at this key. Otherwise it will be set to Edge_XXXX where XXXX is a sequential unique number.-- Mo     |          Note: If edge labels are not unique, they will be forced to be unique.
     |      xKey : str , optional
     |          The desired key name to use for x-coordinates. Default is "x".
     |      yKey : str , optional
     |          The desired key name to use for y-coordinates. Default is "y".
     |      zKey : str , optional
     |          The desired key name to use for z-coordinates. Default is "z".
     |      indent : int , optional
     |          The desired amount of indent spaces to use. Default is 4.
     |      sortKeys : bool , optional
     |          If set to True, the keys will be sorted. Otherwise, they won't be. Default is False.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      overwrite : bool , optional
     |
     |      Returns
     |      -------
     |      bool
     |
     |  FiedlerVector(graph, mantissa=6, silent: bool = False)
     |      Computes the Fiedler vector of a graph. See https://en.wikipedia.org/wiki/Algebraic_connectivity.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph
     |      mantissa : int , optional
     |              The number of decimal places to round the result to. Default is 6.
     |      silent : bool , optional
     |              If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      list
     |          The Fiedler vector (eigenvector corresponding to the second smallest eigenvalue).
     |
     |
     |      Parameters
     |      ----------
     |      graph : topologicp.Graph
     |          The input topologic graph.
     |      key : str , optional
     |          The vertex and edge dictionary key under which to store the parition number. Default is "partition".
     |          Valid partition numbers start from 1. Cut edges receive a partition number of 0.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologicpy.Graph
     |          The partitioned topologic graph.
     |
     |  GlobalClusteringCoefficient(graph)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |
     |      Returns
     |      -------
     |      int
     |          The computed global clustering coefficient.
     |
     |  GraphVizGraph(graph, device='svg_inline', deviceKey=None, scale=1, scaleKey=None, directed=False, directedKey=None, layout='dot', layoutKey=None, rankDir='TB', rankDirKey=None, bgColor='white', bgColorKey=None, fontName='Arial', fontNameKey=None, fontSize=12, fontSizeKey=None, vertexSep=0.5, vertexSepKey=None, rankSep=0.5, rankSepKey=None, splines='true', splinesKey=None, showGraphLabel=False, graphLabel='', graphLabelKey=None, graphLabelLoc='t', graphLabelLocKey=None, showVertexLabel=False, vertexLabelPrefix='', vertexLabelKey=None, vertexWidth=0.5, vertexWidthKey=None, vertexHeight=0.5, vertexHeightKey=None, vertexFixedSize=False, vertexFixedSizeKey=None, vertexShape='circle', vertexShapeKey=None, vertexStyle='filled', vertexStyleKey=None, vertexFillColor='lightgray', vertexFillColorKey=None, vertexColor='black', vertexColorKey=None, vertexFontColor='black', vertexFontColorKey=None, showEdgeLabel=False, edgeLabelPrefix='', edgeLabelKey=None, edgeColor='black', edgeColorKey=None, edgeWidth=1, edgeWidthKey=None, edgeStyle='solid', edgeStyleKey=None, edgeArrowhead='normal', edgeArrowheadKey=None, edgeFontColor='black', edgeFontColorKey=None, silent=False)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      device : str, optional
     |          The output format device, such as 'svg_inline', 'pdf', or 'png'. Default is 'svg_inline'.
     |      deviceKey : str, optional
     |          Dictionary key to override the `device` value. Default is None.
     |      scale : float, optional
     |          Global scaling factor. Default is 1.
     |      scaleKey : str, optional
     |          Dictionary key to override the `scale` per-graph. Default is None.
     |      directed : bool, optional
     |          Whether to treat the graph as directed. Default is False.
     |      directedKey : str, optional
     |          Dictionary key to override the `directed` flag per-graph. Default is None.
     |      layout : str, optional
     |      layoutKey : str, optional
     |          Dictionary key to override the `layout` per-graph. Default is None.
     |      rankDir : str, optional
     |          Direction of graph ranking. Options: 'TB' (top-bottom), 'LR' (left-right), 'RL', 'BT'. Default is 'TB'.
     |      rankDirKey : str, optional
     |          Dictionary key to override `rankDir` per-graph. Default is None.
     |      bgColor : str, optional
     |          Background color. Default is 'white'.
     |      bgColorKey : str, optional
     |          Dictionary key to override `bgColor`. Default is None.
     |      fontName : str, optional
     |          Name of the font to use for all text. Default is 'Arial'.
     |      fontNameKey : str, optional
     |          Dictionary key to override `fontName`. Default is None.
     |      fontSize : int or float, optional
     |          Size of font in points. Default is 12.
     |      fontSizeKey : str, optional
     |          Dictionary key to override `fontSize`. Default is None.
     |      vertexSep : float, optional
     |          Minimum separation between vertices. Default is 0.5.
     |      vertexSepKey : str, optional
     |          Dictionary key to override `vertexSep`. Default is None.
     |      rankSep : float, optional
     |          Separation between ranks. Default is 0.5.
     |      rankSepKey : str, optional
     |          Dictionary key to override `rankSep`. Default is None.
     |      splines : str, optional
     |          Whether to use spline edges. Can be 'true', 'false', or 'polyline'. Default is 'True'.
     |      splinesKey : str, optional
     |          Dictionary key to override `splines`. Default is None.
     |      showGraphLabel : bool, optional
     |          Whether to show a label for the whole graph. Default is False.
     |      graphLabel : str, optional
     |          Text for the graph label. Default is an empty string.
     |      graphLabelKey : str, optional
     |          Dictionary key to override `graphLabel`. Default is None.
     |      graphLabelLoc : str, optional
     |          Position of the graph label: 't' (top), 'b' (bottom), 'c' (center). Default is 't'.
     |      graphLabelLocKey : str, optional
     |          Dictionary key to override `graphLabelLoc`. Default is None.
     |      showVertexLabel : bool, optional
     |          Whether to display vertex labels. Default is False.
     |      vertexLabelPrefix : str, optional
     |          Text prefix for vertex labels. Default is empty string.
     |      vertexLabelKey : str, optional
     |          Dictionary key used to retrieve label text from vertex dictionary. Default is None.
     |      vertexWidth : float, optional
     |          Width of each vertex. Default is 0.5.
     |      vertexWidthKey : str, optional
     |          Dictionary key to override `vertexWidth`. Default is None.
     |      vertexHeight : float, optional
     |          Height of each vertex. Default is 0.5.
     |      vertexHeightKey : str, optional
     |          Dictionary key to override `vertexHeight`. Default is None.
     |      vertexFixedSize : bool, optional
     |          Whether vertices should be fixed in size. Default is False.
     |      vertexFixedSizeKey : str, optional
     |          Dictionary key to override `vertexFixedSize`. Default is None.
     |      vertexShape : str, optional
     |          Shape of the vertex ('circle', 'ellipse', 'box', etc.). Default is 'circle'.
     |      vertexShapeKey : str, optional
     |          Dictionary key to override `vertexShape`. Default is None.
     |      vertexStyle : str, optional
     |          Style of vertex (e.g., 'filled', 'dashed'). Default is 'filled'.
     |      vertexStyleKey : str, optional
     |          Dictionary key to override `vertexStyle`. Default is None.
     |      vertexFillColor : str, optional
     |          Fill color for vertices. Default is 'lightgray'.
     |      vertexFillColorKey : str, optional
     |          Dictionary key to override `vertexFillColor`. Default is None.
     |      vertexColor : str, optional
     |          Border color for vertices. Default is 'black'.
     |      vertexColorKey : str, optional
     |          Dictionary key to override `vertexColor`. Default is None.
     |      vertexFontColor : str, optional
     |          Font color for vertex labels. Default is 'black'.
     |      vertexFontColorKey : str, optional
     |          Dictionary key to override `vertexFontColor`. Default is None.
     |      showEdgeLabel : bool, optional
     |          Whether to display edge labels. Default is False.
     |      edgeLabelPrefix : str, optional
     |          Text prefix for edge labels. Default is empty string.
     |      edgeLabelKey : str, optional
     |          Dictionary key used to retrieve label text from edge dictionary. Default is None.
     |      edgeColor : str, optional
     |          Color of edges. Default is 'black'.
     |      edgeColorKey : str, optional
     |          Dictionary key to override `edgeColor`. Default is None.
     |      edgeWidth : float, optional
     |          Width (thickness) of edges. Default is 1.
     |      edgeWidthKey : str, optional
     |          Dictionary key to override `edgeWidth`. Default is None.
     |      edgeStyle : str, optional
     |          Style of the edge line (e.g., 'solid', 'dashed'). Default is 'solid'.
     |      edgeStyleKey : str, optional
     |          Dictionary key to override `edgeStyle`. Default is None.
     |      edgeArrowhead : str, optional
     |          Arrowhead style for directed edges. Default is 'normal'.
     |      edgeArrowheadKey : str, optional
     |          Dictionary key to override `edgeArrowhead`. Default is None.
     |      edgeFontColor : str, optional
     |          Font color for edge labels. Default is 'black'.
     |      edgeFontColorKey : str, optional
     |          Dictionary key to override `edgeFontColor`. Default is None.
     |      overwrite : bool, optional
     |          If True, overwrites existing files at the given path. Default is False.
     |      silent : bool, optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      graphviz.graphs.Graph
     |          The created GraphViz graph.
     |
     |  Guid(graph)
     |      Returns the guid of the input graph
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |
     |  HasseDiagram(topology, types=['vertex', 'edge', 'wire', 'face', 'shell', 'cell', 'cellComplex'], topDown: bool = False, minDistance: float = 0.1, vertexLabelKey: str = 'label', vertexTypeKey: str = 'type', vertexColorKey: str = 'color', colorScale: str = 'viridis', storeBREP: bool = False, tolerance: float = 0.0001, silent: bool = False)-- More  --     |      Vertices represent topologies (vertices, edges, wires, faces, shells, cells, cellComplexes).
     |      Edges represent inclusion (e.g. vertex \u2282 edge, edge \u2282 wire).
     |
     |      Parameters
     |      ----------
     |      topology : topologic_core.Topology
     |          The input topology
     |      types : optional, list
     |          The list of topology types that you wish to encode in the Hasse diagram.
     |          This list must be ordered according to topologic_core's class hierarchy.
     |          If you are not interested in representing some topology types. These can be omitted.
     |          The default is:
     |          ["vertex", "edge", "wire", "face", "shell", "cell", "cellComplex"].
     |      topDown : bool , optional
     |          If set to True, the graph edges are directed from topologies to their subtopologies.
     |          Otherwise, they are directed from topologies to their supertopologies. Default is False.
     |      minDistance : float , optional
     |          The desired minimum distance between the vertices of the graph. Default is 0.1.
     |      vertexLabelKey: str , optional
     |      vertexTypeKey: str , optional
     |      vertexColorKey: str , optional
     |          The desired vertex dictionary key under which to store the topology color. Default is "color".
     |      colorScale : str , optional
     |          The desired type of plotly color scales to use (e.g. "viridis", "plasma"). Default is "viridis". For a full list of names, see https://plotly.com/python/builtin-colorscales/.
     |          In addition to these, three color-blind friendly scales are included. These are "protanopia", "deuteranopia", and "tritanopia" for red, green, and blue colorblindness respectively.
     |      storeBREP : bool , optional
     |          If set to True, store the BRep of the topology in its representative vertex. Default is False.
     |      tolerance : float
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The created Hesse diagram graph.
     |
     |      Returns the Graph Hopper kernel between two graphs. This kernel compares hop-wise shortest-path
     |      frontiers between nodes in two graphs using an automatically selected node-level kernel:
     |      or vertex degree if `key` is None or missing. See Vishwanathan et al. (2010) for path-based graph kernels.
     |
     |      Parameters
     |      ----------
     |      graphA : topologic_core.Graph
     |          The first input graph.
     |      graphB : topologic_core.Graph
     |          The second input graph.
     |      key : str , optional
     |          The vertex dictionary key used to derive node features. If numeric for most vertices, a numeric
     |          RBF node kernel is used; if non-numeric, a delta node kernel is used. If None or missing, the
     |          vertex degree is used as a numeric feature. Default is None.
     |      maxHops : int , optional
     |          The maximum shortest-path hop distance to consider. Default is 3.
     |      decay : float , optional
     |          A per-hop geometric decay factor in the range (0, 1]. Default is 0.5.
     |      normalize : bool , optional
     |          If True, the kernel is cosine-normalized using self-kernel values so that identical graphs score 1.0.
     |          The default is True.
     |      mantissa : int , optional
     |          The number of decimal places to which to round the result. Default is 6.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      float
     |          The (optionally normalized) Graph Hopper kernel value rounded to the specified mantissa.
     |
     |
     |      Parameters
     |      ----------
     |      graphA : topologic_core.Graph
     |          The first input graph.
     |      graphB : topologic_core.Graph
     |          The second input graph.
     |      vertexKeys : list or str , optional
     |          The vertex dictionary key (str) or keys (list of str) to use to determine if two vertices are the same.
     |          vertices (within the tolerance) will be used to determine sameness. Default is None.
     |      useCentroid : bool , optional
     |          Otherwise, the coordinates of the vertex of the second input graph are used. Default is False.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          the resultant graph. Vertex and edge dictionaries are merged.
     |
     |  Imprint(graphA, graphB, vertexKeys, useCentroid: bool = False, tolerance: float = 0.0001, silent: bool = False)
     |
     |      Parameters
     |      ----------
     |      graphA : topologic_core.Graph
     |          The first input graph.
     |      graphB : topologic_core.Graph
     |          The second input graph.
     |      vertexKeys : list or str , optional
     |          The vertex dictionary key (str) or keys (list of str) to use to determine if two vertices are the same.
     |          vertices (within the tolerance) will be used to determine sameness. Default is None.
     |      useCentroid : bool , optional
     |          Otherwise, the coordinates of the vertex of the first input graph are used. Default is False.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          the resultant graph. Vertex and edge dictionaries are merged.
     |
     |  IncomingEdges(graph, vertex, directed: bool = False, tolerance: float = 0.0001) -> list
     |      Returns the incoming edges connected to a vertex. An edge is considered incoming if its end vertex is
     |      coincident with the input vertex.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertex : topologic_core.Vertex
     |          The input vertex.
     |      directed : bool , optional
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      list
     |          The list of incoming edges
     |
     |  IncomingVertices(graph, vertex, directed: bool = False, tolerance: float = 0.0001) -> list
     |      and the the edge connecting it to the input vertex is an incoming edge.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertex : topologic_core.Vertex
     |          The input vertex.
     |      directed : bool , optional
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      list
     |          The list of incoming vertices
     |
     |  Integration(graph, weightKey: str = 'length', normalize: bool = False, nxCompatible: bool = True, key: str = 'integration', colorKey: str = 'in_color', colorScale: str = 'viridis', mantissa: int = 6, tolerance: float = 0.0001, silent: bool = False)
     |      list matches the order of Graph.Vertices(graph).
     |      See: https://en.wikipedia.org/wiki/Closeness_centrality
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      weightKey : str , optional
     |          If specified, this edge attribute will be used as the distance weight when
     |          computing shortest paths. If set to a name containing "Length" or "Distance",
     |          it will be mapped to "length".
     |          Note: Graph.NetworkXGraph automatically provides a "length" attribute on all edges.
     |      normalize : bool , optional
     |          If True, the returned values are rescaled to [0, 1]. Otherwise raw values
     |          from NetworkX (optionally using the improved formula) are returned.
     |      nxCompatible : bool , optional
     |          If True, use NetworkX's wf_improved scaling (Wasserman and Faust).
     |          For single-component graphs it matches the original formula.
     |      key : str , optional
     |          The dictionary key under which to store the closeness centrality score.
     |      colorKey : str , optional
     |          The dictionary key under which to store a color derived from the score.
     |      colorScale : str , optional
     |          Plotly color scale name (e.g., "viridis", "plasma").
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      list[float]
     |          Integration (closeness centrality) values for vertices in the same order as Graph.Vertices(graph).
     |
     |
     |      Parameters
     |      ----------
     |      graphA : topologic_core.Graph
     |          The first input graph.
     |      graphB : topologic_core.Graph
     |          The second input graph.
     |      vertexKeys : list or str , optional
     |          The vertex dictionary key (str) or keys (list of str) to use to determine if two vertices are the same.
     |          vertices (within the tolerance) will be used to determine sameness. Default is None.
     |      useCentroid : bool , optional
     |          Otherwise, the coordinates of the vertex of the first input graph are used. Default is False.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          the resultant graph. Vertex and edge dictionaries are merged.
     |
     |  IsBipartite(graph, tolerance=0.0001)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      bool
     |          True if the input graph is complete. False otherwise
     |
     |  IsComplete(graph)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |
     |      Returns
     |      -------
     |      bool
     |          True if the input graph is complete. False otherwise
     |
     |  IsConnected(graph, vertexA, vertexB, silent: bool = False)
     |      Returns True if the two input vertices are directly connected by an edge. Returns False otherwise.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexA : topologic_core.Vertex
     |          The first input vertex.
     |      vertexB : topologic_core.Vertex
     |          The second input vertex
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      bool
     |          True if the input vertices are connected by an edge. False otherwise.
     |
     |  IsEmpty(graph, silent: bool = False)
     |      Tests if the input graph is empty (Has no vertices).
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      bool
     |          True if the two input graphs are isomorphic. False otherwise
     |
     |  IsErdoesGallai(graph, sequence)
     |      Returns True if the input sequence satisfies the Erd\u0151sûGallai theorem. Returns False otherwise. See https://en.wikipedia.org/wiki/Erd%C5%91s%E2%80%93Gallai_theorem.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      sequence : list
     |          The input sequence.
     |
     |      Returns
     |      -------
     |      bool
     |          True if the input sequence satisfies the Erd\u0151sûGallai theorem. False otherwise.
     |
     |  IsIsomorphic(graphA, graphB, maxIterations=10, silent=False)
     |      Tests if the two input graphs are isomorphic according to the Weisfeiler Lehman graph isomorphism test. See https://en.wikipedia.org/wiki/Weisfeiler_Leman_graph_isomorphism_test
     |
     |      Parameters
     |      ----------
     |      graphA : topologic_core.Graph
     |          The first input graph.
     |      graphB : topologic_core.Graph
     |          The second input graph.
     |      maxIterations : int , optional
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      bool
     |          True if the two input graphs are isomorphic. False otherwise
     |
     |  IsTree(graph)
     |      Returns True if the input graph has a hierarchical tree-like structure. Returns False otherwise.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |
     |      Returns
     |      -------
     |      bool
     |          True if the input graph has a hierarchical tree-like structure. False otherwise.
     |
     |  IsolatedVertices(graph)
     |      Returns the list of isolated vertices in the input graph.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |
     |      Returns
     |      -------
     |      list
     |          The list of isolated vertices.
     |
     |  JSONData(graph, verticesKey: str = 'vertices', edgesKey: str = 'edges', vertexLabelKey: str = '', edgeLabelKey: str = '', sourceKey: str = 'source', targetKey: str = 'targ     |      Converts the input graph into JSON data.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      verticesKey : str , optional
     |          The desired key name to call vertices. Default is "vertices".
     |      edgesKey : str , optional
     |          The desired key name to call edges. Default is "edges".
     |      vertexLabelKey : str , optional
     |          If set to a valid string, the vertex label will be set to the value at this key. Otherwise it will be set to Vertex_XXXX where XXXX is a sequential unique number.-     |          Note: If vertex labels are not unique, they will be forced to be unique.
     |      edgeLabelKey : str , optional
     |          If set to a valid string, the edge label will be set to the value at this key. Otherwise it will be set to Edge_XXXX where XXXX is a sequential unique number.-- Mo     |          Note: If edge labels are not unique, they will be forced to be unique.
     |      sourceKey : str , optional
     |          The dictionary key used to store the source vertex. Default is "source".
     |      targetKey : str , optional
     |          The dictionary key used to store the target vertex. Default is "target".
     |      xKey : str , optional
     |          The desired key name to use for x-coordinates. Default is "x".
     |      yKey : str , optional
     |          The desired key name to use for y-coordinates. Default is "y".
     |      zKey : str , optional
     |          The desired key name to use for z-coordinates. Default is "z".
     |      geometryKey : str , optional
     |          The desired key name to use for geometry. Default is "brep".
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      dict
     |          The JSON data
     |
     |  JSONLDData(graph, context=None, verticesKey='nodes', edgesKey='edges', labelKey='label', sourceKey='source', targetKey='target', categoryKey='category', xKey='x', yKey='y', zKey='z', mantissa=6)
     |      Exports the Graph to a JSON-LD representation.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The TopologicPy Graph object to export.
     |      context : dict, optional
     |          A JSON-LD context mapping TopologicPy keys to IRIs (e.g., schema.org, geo, etc.).
     |      verticesKey : str , optional
     |          The desired key name to call vertices. Default is "vertices".
     |      edgesKey : str , optional
     |          The desired key name to call edges. Default is "edges".
     |      labelKey : str , optional
     |          The desired key name to use for label. Default is "label".
     |      sourceKey : str , optional
     |          The desired key name to use for source. Default is "source".
     |      targetKey : str , optional
     |          The desired key name to use for target. Default is "target".
     |      categoryKey : str , optional
     |          The desired key name to use for lcategoryabel. Default is "category".
     |      xKey : str , optional
     |          The desired key name to use for x-coordinates. Default is "x".
     |      yKey : str , optional
     |          The desired key name to use for y-coordinates. Default is "y".
     |      zKey : str , optional
     |          The desired key name to use for z-coordinates. Default is "z".
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |
     |      Returns
     |      -------
     |      dict
     |          A JSON-LD representation of the graph.
     |
     |  JSONLDString(graph, context=None, verticesKey='nodes', edgesKey='edges', labelKey='label', sourceKey='source', targetKey='target', categoryKey='category', xKey='x', yKey='y', zKey='z', indent=2, sortKeys=False, mantissa=6)
     |      Converts the input graph into a JSON-LD string.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The TopologicPy Graph object to export.
     |      context : dict, optional
     |          A JSON-LD context mapping TopologicPy keys to IRIs (e.g., schema.org, geo, etc.)
     |      context : dict, optional
     |          A JSON-LD context mapping TopologicPy keys to IRIs (e.g., schema.org, geo, etc.).
     |      verticesKey : str , optional
     |          The desired key name to call vertices. Default is "vertices".
     |      edgesKey : str , optional
     |          The desired key name to call edges. Default is "edges".
     |      labelKey : str , optional
     |          The desired key name to use for label. Default is "label".
     |      sourceKey : str , optional
     |          The desired key name to use for source. Default is "source".
     |      targetKey : str , optional
     |          The desired key name to use for target. Default is "target".
     |      categoryKey : str , optional
     |          The desired key name to use for lcategoryabel. Default is "category".
     |      xKey : str , optional
     |          The desired key name to use for x-coordinates. Default is "x".
     |      yKey : str , optional
     |          The desired key name to use for y-coordinates. Default is "y".
     |      zKey : str , optional
     |          The desired key name to use for z-coordinates. Default is "z".
     |      indent : int , optional
     |          The desired indent. Default is 2.
     |      sortKeys : bool , optional
     |          If set to True, the keys will be sorted. Otherwise, they won't be. Default is False.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      Returns
     |      -------
     |      dict
     |          A JSON-LD representation of the graph.
     |
     |  JSONString(graph, verticesKey='vertices', edgesKey='edges', vertexLabelKey='', edgeLabelKey='', xKey='x', yKey='y', zKey='z', indent=4, sortKeys=False, mantissa=6)-- More      |      Converts the input graph into a JSON string.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      verticesKey : str , optional
     |          The desired key name to call vertices. Default is "vertices".
     |      edgesKey : str , optional
     |          The desired key name to call edges. Default is "edges".
     |      vertexLabelKey : str , optional
     |          If set to a valid string, the vertex label will be set to the value at this key. Otherwise it will be set to Vertex_XXXX where XXXX is a sequential unique number.-     |          Note: If vertex labels are not unique, they will be forced to be unique.
     |      edgeLabelKey : str , optional
     |          If set to a valid string, the edge label will be set to the value at this key. Otherwise it will be set to Edge_XXXX where XXXX is a sequential unique number.-- Mo     |          Note: If edge labels are not unique, they will be forced to be unique.
     |      xKey : str , optional
     |          The desired key name to use for x-coordinates. Default is "x".
     |      yKey : str , optional
     |          The desired key name to use for y-coordinates. Default is "y".
     |      zKey : str , optional
     |          The desired key name to use for z-coordinates. Default is "z".
     |      indent : int , optional
     |          The desired amount of indent spaces to use. Default is 4.
     |      sortKeys : bool , optional
     |          If set to True, the keys will be sorted. Otherwise, they won't be. Default is False.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |
     |      Returns
     |      -------
     |      str
     |          The JSON str
     |
     |  Kernel(graphA, graphB, method: str = 'WL', key: str = None, iterations: int = 2, maxHops: int = 3, decay: float = 0.5, normalize: bool = True, mantissa: int = 6, silent: bool = False, **kwargs)
     |      Returns a graph-to-graph kernel value using the selected method. This is a
     |      convenience dispatcher over specific kernel implementations (e.g., WL and Hopper).
     |
     |      Parameters
     |      ----------
     |      graphA : topologic_core.Graph
     |          The first input graph.
     |      graphB : topologic_core.Graph
     |          The second input graph.
     |      method : str , optional
     |          The kernel method to use. Supported values: "WL" (WeisfeilerûLehman),
     |          "Hopper" (Graph Hopper). The default is "WL".
     |      key : str , optional
     |          A vertex dictionary key used by the selected method to derive node labels/features.
     |          For "WL", if None the vertex degree is used as the initial label. For "Hopper",
     |          if None or missing, the vertex degree is used as a numeric feature. Default is None.
     |      iterations : int , optional
     |          WL-specific parameter: number of WL iterations. Ignored by other methods. Default is 2.
     |      maxHops : int , optional
     |          Hopper-specific parameter: maximum shortest-path hop distance. Ignored by other methods. Default is 3.
     |      decay : float , optional
     |          Hopper-specific parameter: per-hop geometric decay in (0, 1]. Ignored by other methods. Default is 0.5.
     |      normalize : bool , optional
     |          If True, returns a normalized kernel score in [0, 1] when supported by the method. Default is True.
     |      mantissa : int , optional
     |          Number of decimal places for rounding the returned value. Default is 6.
     |      silent : bool , optional
     |          If True, error and warning messages are suppressed. Default is False.
     |      **kwargs
     |          Reserved for future method-specific options; ignored by current implementations.
     |
     |      Returns
     |      -------
     |      float
     |          The kernel value computed by the selected method, rounded to `mantissa`,
     |          or None if inputs are invalid or the method is unsupported.
     |
     |      Notes
     |      -----
     |      - "WL" calls `Graph.WLKernel(graphA, graphB, key=..., iterations=..., normalize=..., mantissa=...)`.
     |      - Method selection is case-insensitive and tolerates common aliases for WL.
     |
     |  Laplacian(graph, silent: bool = False, normalized: bool = False)
     |      Returns the Laplacian matrix of the input graph. See https://en.wikipedia.org/wiki/Laplacian_matrix.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |      normalized : bool , optional
     |          If set to True, the returned Laplacian matrix is normalized. Default is False.
     |
     |      Returns
     |      -------
     |      list
     |          The Laplacian matrix as a nested list.
     |
     |  Leaves(graph, weightKey: str = None, mantissa: int = 6, tolerance: float = 0.0001, silent: bool = False)
     |      Returns a list of all vertices that have a degree of 1, also called leaf nodes.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      weightKey : str , optional
     |          the vertex degree. If a numeric value cannot be retrieved from an edge, a value of 1 is used instead.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      list
     |          The list of leaf nodes
     |
     |      Create a line graph based on the input graph. See https://en.wikipedia.org/wiki/Line_graph.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      transferVertexDictionaries : bool, optional
     |      transferEdgeDictionaries : bool, optional
     |      tolerance : float, optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The created line graph.
     |
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertices : list , optional
     |      key : str , optional
     |          The dictionary key under which to store the local clustering coefficient score. Default is "lcc".
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      list
     |
     |      Returns the longest path that connects the input vertices.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexA : topologic_core.Vertex
     |          The first input vertex.
     |      vertexB : topologic_core.Vertex
     |          The second input vertex.
     |      vertexKey : str , optional
     |          The vertex key to maximize. If set the vertices dictionaries will be searched for this key and the associated value will be used to compute the longest path that maximizes the total value. The value must be numeric. Default is None.
     |      edgeKey : str , optional
     |          The edge key to maximize. If set the edges dictionaries will be searched for this key and the associated value will be used to compute the longest path that maximi     |      costKey : str , optional
     |      timeLimit : int , optional
     |          The time limit in second. Default is 10 seconds.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Wire
     |          The longest path between the input vertices.
     |
     |  MaximumDelta(graph)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          the input graph.
     |
     |      Returns
     |      -------
     |      int
     |          The maximum delta.
     |
     |      Returns the maximum flow of the input graph. See https://en.wikipedia.org/wiki/Maximum_flow_problem
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph. This is assumed to be a directed graph
     |      source : topologic_core.Vertex
     |          The input source vertex.
     |      sink : topologic_core.Vertex
     |          The input sink/target vertex.
     |      edgeKeyFwd : str , optional
     |          The edge dictionary key to use to find the value of the forward capacity of the edge. If not set, the length of the edge is used as its capacity. Default is None.-     |      edgeKeyBwd : str , optional
     |          The edge dictionary key to use to find the value of the backward capacity of the edge. This is only considered if the edge is set to be bidrectional. Default is None.
     |      bidirKey : str , optional
     |          The edge dictionary key to use to determine if the edge is bidrectional. Default is None.
     |      bidrectional : bool , optional
     |          If set to True, the whole graph is considered to be bidirectional. Default is False.
     |      residualKey : str , optional
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      float
     |          The maximum flow.
     |
     |
     |      Parameters
     |      ----------
     |      graphA : topologic_core.Graph
     |          The first input graph.
     |      graphB : topologic_core.Graph
     |          The second input graph.
     |      vertexKeys : list or str , optional
     |          The vertex dictionary key (str) or keys (list of str) to use to determine if two vertices are the same.
     |          vertices (within the tolerance) will be used to determine sameness. Default is None.
     |      vertexColorKey : str , optional
     |      useCentroid : bool , optional
     |          Otherwise, the coordinates of the vertex of the first input graph are used. Default is False.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          the resultant graph. Vertex and edge dictionaries are merged.
     |
     |      Merges the input vertices into one vertex and reconnects all edges to the new vertex.
     |      If two of the input vertices are the end points of the same edge, that edge is deleted.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      *vertices : topologic_core.Vertex
     |          Two or more instances of `topologic_core.Topology` to be processed.
     |      targetVertex : topologic_core.Vertex, optional
     |          The target vertex to merge into. If None, a centroid is computed. Default is None.
     |      transferDictionaries : bool, optional
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          A new graph with the vertices merged and edges updated.
     |
     |  MeshData(graph, mantissa: int = 6, tolerance: float = 0.0001)
     |      Returns the mesh data of the input graph.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      dict
     |          The python dictionary of the mesh data of the input graph. The keys in the dictionary are:
     |          'vertices' : The list of [x, y, z] coordinates of the vertices.
     |          'edgeDictionaries' : The python dictionaries of the edges (in the same order as the list of edges).
     |
     |  MetricDistance(graph, vertexA, vertexB, mantissa: int = 6, tolerance: float = 0.0001)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexA : topologic_core.Vertex
     |          The first input vertex.
     |      vertexB : topologic_core.Vertex
     |          The second input vertex.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      float
     |          The shortest-path metric distance between the input vertices.
     |
     |  MinimumDelta(graph)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |
     |      Returns
     |      -------
     |      int
     |          The minimum delta.
     |
     |  MinimumSpanningTree(graph, edgeKey=None, tolerance=0.0001)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      edgeKey : string , optional
     |          If set, the value of the edgeKey will be used as the weight and the tree will minimize the weight. The value associated with the edgeKey must be numerical. If the key is not set, the edges will be sorted by their length. Default is None
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The minimum spanning tree.
     |
     |  NavigationGraph(face, sources=None, destinations=None, tolerance=0.0001, numWorkers=None)
     |      Creates a 2D navigation graph.
     |
     |      Parameters
     |      ----------
     |      face : topologic_core.Face
     |      sources : list
     |      destinations : list
     |          The input list of destinations (vertices). Navigation edges will connect these vertices to sources.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      numWorkers : int, optional
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The navigation graph.
     |
     |  NearestVertex(graph, vertex)
     |      Returns the vertex in the input graph that is the nearest to the input vertex.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertex : topologic_core.Vertex
     |          The input vertex.
     |
     |      Returns
     |      -------
     |      topologic_core.Vertex
     |          The vertex in the input graph that is the nearest to the input vertex.
     |
     |      Converts the input graph into a NetworkX Graph. See http://networkx.org
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      xKey : str , optional
     |          The dictionary key under which to store the X-Coordinate of the vertex. Default is 'x'.
     |      yKey : str , optional
     |          The dictionary key under which to store the Y-Coordinate of the vertex. Default is 'y'.
     |      zKey : str , optional
     |          The dictionary key under which to store the Z-Coordinate of the vertex. Default is 'z'.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      networkX Graph
     |          The created networkX Graph
     |
     |  Order(graph)
     |      Returns the graph order of the input graph. The graph order is its number of vertices.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |
     |      Returns
     |      -------
     |      int
     |          The number of vertices in the input graph
     |
     |  OutgoingEdges(graph, vertex, directed: bool = False, tolerance: float = 0.0001) -> list
     |      Returns the outgoing edges connected to a vertex. An edge is considered outgoing if its start vertex is
     |      coincident with the input vertex.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertex : topologic_core.Vertex
     |          The input vertex.
     |      directed : bool , optional
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      list
     |          The list of outgoing edges
     |
     |  OutgoingVertices(graph, vertex, directed: bool = False, tolerance: float = 0.0001) -> list
     |      and the the edge connecting it to the input vertex is an outgoing edge.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertex : topologic_core.Vertex
     |          The input vertex.
     |      directed : bool , optional
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      list
     |          The list of incoming vertices
     |
     |  PageRank(graph, alpha: float = 0.85, maxIterations: int = 100, normalize: bool = True, directed: bool = False, key: str = 'page_rank', colorKey='pr_color', colorScale='viridis', mantissa: int = 6, tolerance: float = 0.0001)
     |      Calculates PageRank scores for vertices in a directed graph. see https://en.wikipedia.org/wiki/PageRank.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      alpha : float , optional
     |          The damping (dampening) factor. Default is 0.85. See https://en.wikipedia.org/wiki/PageRank.
     |      maxIterations : int , optional
     |          The maximum number of iterations to calculate the page rank. Default is 100.
     |      normalize : bool , optional
     |          If set to True, the results will be normalized from 0 to 1. Otherwise, they won't be. Default is True.
     |      directed : bool , optional
     |      key : str , optional
     |          The dictionary key under which to store the page_rank score. Default is "page_rank"
     |      colorKey : str , optional
     |          The desired dictionary key under which to store the pagerank color. Default is "pr_color".
     |      colorScale : str , optional
     |          The desired type of plotly color scales to use (e.g. "viridis", "plasma"). Default is "viridis". For a full list of names, see https://plotly.com/python/builtin-colorscales/.
     |          In addition to these, three color-blind friendly scales are included. These are "protanopia", "deuteranopia", and "tritanopia" for red, green, and blue colorblindness respectively.
     |      mantissa : int , optional
     |          The desired length of the mantissa.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      list
     |          The list of page ranks for the vertices in the graph.
     |
     |  Partition(graph, method: str = 'Betweenness', n: int = 2, m: int = 10, key: str = 'partition', mantissa: int = 6, tolerance: float = 0.0001, silent: bool = False)-- More       |
     |      Parameters
     |      ----------
     |      graph : topologicp.Graph
     |          The input topologic graph.
     |      method : str , optional
     |          The desired partitioning method. The options are:
     |          - "Betweenness"
     |          - "Community" or "Louvain"
     |          - "Fiedler" or "Eigen"
     |          It is case insensitive. Default is "Betweenness"
     |      n : int , optional
     |      m : int , optional
     |          The desired maximum number of tries to partition the graph when selecting the "Betweenness" method. This parameter is ignored for other methods. Default is 10.-- M     |      key : str , optional
     |          The vertex and edge dictionary key under which to store the parition number. Default is "partition".
     |          Valid partition numbers start from 1. Cut edges receive a partition number of 0.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |              If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologicpy.Graph
     |          The partitioned topologic graph.
     |
     |  Path(graph, vertexA, vertexB, tolerance=0.0001)
     |      Returns a path (wire) in the input graph that connects the input vertices.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexA : topologic_core.Vertex
     |          The first input vertex.
     |      vertexB : topologic_core.Vertex
     |          The second input vertex.
     |      tolerance : float, optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Wire
     |          The path (wire) in the input graph that connects the input vertices.
     |
     |  PyvisGraph(graph, path, overwrite: bool = True, height: int = 900, backgroundColor: str = 'white', fontColor: str = 'black', notebook: bool = False, vertexSize: int = 6, vertexSizeKey: str = None, vertexColor: str = 'black', vertexColorKey: str = None, vertexLabelKey: str = None, vertexGroupKey: str = None, vertexGroups: list = None, minVertexGroup: float = None, maxVertexGroup: float = None, edgeLabelKey: str = None, edgeWeight: int = 0, edgeWeightKey: str = None, showNeighbours: bool = True, selectMenu: bool = True, filterMenu: bool = True, colorScale: str = 'viridis', tolerance: float = 0.0001)
     |      Displays a pyvis graph. See https://pyvis.readthedocs.io/.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      path : str
     |          The desired file path to the HTML file into which to save the pyvis graph.
     |      overwrite : bool , optional
     |          If set to True, the HTML file is overwritten.
     |      height : int , optional
     |          The desired figure height in pixels. Default is 900 pixels.
     |      backgroundColor : str, optional
     |      fontColor : str , optional
     |      notebook : bool , optional
     |      vertexSize : int , optional
     |          The desired default vertex size. Default is 6.
     |      vertexSizeKey : str , optional
     |          If not set to None, the vertex size will be derived from the dictionary value set at this key. If set to "degree", the size of the vertex will be determined by its degree (number of neighbors). Default is None.
     |      vertexColor : str , optional
     |          The desired default vertex color. his can be a named color or a hexadecimal value. Default is 'black'.
     |      vertexColorKey : str , optional
     |      vertexLabelKey : str , optional
     |      vertexGroupKey : str , optional
     |      vertexGroups : list , optional
     |          The list of all possible vertex groups. This will help in vertex coloring. Default is None.
     |      minVertexGroup : int or float , optional
     |      maxVertexGroup : int or float , optional
     |
     |      edgeWeight : int , optional
     |          The desired default weight of the edge. This determines its thickness. Default is 0.
     |      edgeWeightKey : str, optional
     |          If not set to None, the edge weight will be derived from the dictionary value set at this key. If set to "length" or "distance", the weight of the edge will be determined by its geometric length. Default is None.
     |      edgeLabelKey : str , optional
     |      showNeighbors : bool , optional
     |          If set to True, a list of neighbors is shown when you hover over a vertex. Default is True.
     |      selectMenu : bool , optional
     |          If set to True, a selection menu will be displayed. Default is True
     |      filterMenu : bool , optional
     |          If set to True, a filtering menu will be displayed. Default is True.
     |      colorScale : str , optional
     |          The desired type of plotly color scales to use (e.g. "viridis", "plasma"). Default is "viridis". For a full list of names, see https://plotly.com/python/builtin-colorscales/.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      Returns
     |      -------
     |      None
     |          The pyvis graph is displayed either inline (notebook mode) or in a new browser window or tab.
     |
     |  Quotient(topology, topologyType: str = 'vertex', key: str = None, groupLabelKey: str = None, groupCountKey: str = 'count', weighted: bool = False, edgeWeightKey: str = 'weight', idKey: str = None, silent: bool = False)
     |      Construct the quotient graph induced by grouping sub-topologies (Cells/Faces/Edges/Vertices)
     |      by a dictionary value. Two groups are connected if any member of one is adjacent to any member
     |      of the other via Topology.AdjacentTopologies. If weighted=True, edge weights count the number
     |      of distinct member-level adjacencies across groups. See https://en.wikipedia.org/wiki/Quotient_graph
     |
     |      Parameters
     |      ----------
     |      topology : topologic_core.Topology or topologic_core.Graph
     |          The input topology or graph.
     |      topologyType : str
     |      key : str , optional
     |          Dictionary key used to form groups. If None, all items fall into one group.
     |      groupLabelKey : str , optional
     |          Vertex-dictionary key storing the group label. Default is "group_label".
     |      groupCountKey : str , optional
     |          Vertex-dictionary key storing the group size. Default is "count".
     |      weighted : bool , optional
     |          If True, store counts of cross-group adjacencies on edges under edgeWeightKey. Default is False.
     |      edgeWeightKey : str , optional
     |          Edge-dictionary key storing the weight when weighted=True. Default "weight".
     |      idKey : str , optional
     |          Optional dictionary key that uniquely identifies each sub-topology. If provided and present
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |
     |  RemoveEdge(graph, edge, tolerance=0.0001)
     |      Removes the input edge from the input graph.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      edge : topologic_core.Edge
     |          The input edge.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The input graph with the input edge removed.
     |
     |  RemoveIsolatedVertices(graph, tolerance=0.0001)
     |      Removes all isolated vertices from the input graph.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The input graph with all isolated vertices removed.
     |
     |  RemoveVertex(graph, vertex, tolerance=0.0001)
     |      Removes the input vertex from the input graph.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertex : topologic_core.Vertex
     |          The input vertex.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The input graph with the input vertex removed.
     |
     |      Reshapes the input graph according to the desired input shape parameter.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      shape : str , optional
     |          The desired shape of the graph.
     |          If set to 'spring 2D' or 'spring_3d', the algorithm uses a simplified version of the Fruchterman-Reingold force-directed algorithm to distribute the vertices.-- Mo     |          If set to 'radial 2D', the nodes will be distributed along concentric circles in the XY plane.
     |          If set to 'tree 2D' or 'tree 3D', the nodes will be distributed using the Reingold-Tillford layout.
     |          If set to 'circle 2D', the nodes will be distributed on the cirumference of a segemented circles  in the XY plane, based on the size and sides input parameter (radius=size/2).
     |          If set to 'cluster 2D', or 'cluster 3D, the nodes will be clustered according to the 'key' input parameter. The overall radius of the cluster is determined by the size input parameter (radius = size/2)
     |          The default is 'spring 2D'.
     |      k : float, optional
     |          The desired spring constant to use for the attractive and repulsive forces. Default is 0.8.
     |      seed : int , optional
     |          The desired random seed to use. Default is None.
     |      iterations : int , optional
     |          The desired maximum number of iterations to solve the forces in the 'spring' mode. Default is 50.
     |      rootVertex : topologic_core.Vertex , optional
     |          The desired vertex to use as the root of the tree and radial layouts.
     |      size : float , optional
     |          The desired overall size of the graph.
     |      sides : int , optional
     |          The desired number of sides of the circle layout option. Default is 16
     |      length : float, optional
     |          The desired horizontal length for the line layout option. Default is 1.0.
     |      key : string, optional
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The reshaped graph.
     |
     |  SetDictionary(graph, dictionary)
     |      Sets the input graph's dictionary to the input dictionary
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      dictionary : topologic_core.Dictionary or dict
     |          The input dictionary.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The input graph with the input dictionary set in it.
     |
     |  ShortestPath(graph, vertexA, vertexB, vertexKey='', edgeKey='Length', tolerance=0.0001)
     |      Returns the shortest path that connects the input vertices. The shortest path will take into consideration both the vertexKey and the edgeKey if both are specified and will minimize the total "cost" of the path. Otherwise, it will take into consideration only whatever key is specified.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexA : topologic_core.Vertex
     |          The first input vertex.
     |      vertexB : topologic_core.Vertex
     |          The second input vertex.
     |      vertexKey : string , optional
     |          The vertex key to minimise. If set the vertices dictionaries will be searched for this key and the associated value will be used to compute the shortest path that minimized the total value. The value must be numeric. Default is None.
     |      edgeKey : string , optional
     |          The edge key to minimise. If set the edges dictionaries will be searched for this key and the associated value will be used to compute the shortest path that minim     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Wire
     |          The shortest path between the input vertices.
     |
     |      Returns the shortest path that connects the input vertices.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexA : topologic_core.Vertex
     |          The first input vertex.
     |      vertexB : topologic_core.Vertex
     |          The second input vertex.
     |      vertexKey : string , optional
     |          The vertex key to minimise. If set the vertices dictionaries will be searched for this key and the associated value will be used to compute the shortest path that minimized the total value. The value must be numeric. Default is None.
     |      edgeKey : string , optional
     |          The edge key to minimise. If set the edges dictionaries will be searched for this key and the associated value will be used to compute the shortest path that minim     |      timeLimit : int , optional
     |          The search time limit in seconds. Default is 10 seconds
     |      pathLimit: int , optional
     |          The number of found paths limit. Default is 10 paths.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      list
     |          The list of shortest paths between the input vertices.
     |
     |  Show(*graphs, sagitta=0, absolute=False, sides=8, angle=0, vertexColor='black', vertexColorKey=None, vertexSize=10, vertexSizeKey=None, vertexLabelKey=None, vertexGroupKey=None, vertexGroups=[], vertexMinGroup=None, vertexMaxGroup=None, showVertices=True, showVertexLabel=False, showVertexLegend=False, edgeColor='red', edgeColorKey=None, edgeWidth=1, edgeWidthKey=None, edgeLabelKey=None, edgeGroupKey=None, edgeGroups=[], edgeMinGroup=None, edgeMaxGroup=None, showEdges=True, showEdgeLabel=False, showEdgeLegend=False, colorScale='viridis', renderer=None, width=950, height=500, xAxis=False, yAxis=False, zAxis=False, axisSize=1, backgroundColor='rgba(0,0,0,0)', marginLeft=0, marginRight=0, marginTop=20,      |      Shows the graph using Plotly.
     |
     |      Parameters
     |      ----------
     |      *graphs : topologic_core.Graph
     |          One or more toplogic_core.graph objects.
     |      sagitta : float , optional
     |          The length of the sagitta. In mathematics, the sagitta is the line connecting the center of a chord to the apex (or highest point) of the arc subtended by that chord. Default is 0 which means a straight edge is drawn instead of an arc. Default is 0.
     |      absolute : bool , optional
     |          If set to True, the sagitta length is treated as an absolute value. Otherwise, it is treated as a ratio based on the length of the edge. Default is False.-- More       |      sides : int , optional
     |          The number of sides of the arc. Default is 8.
     |      angle : float, optional
     |          An additional angle in degrees to rotate arcs (where sagitta is more than 0). Default is 0.
     |      vertexColor : str , optional
     |          The desired color of the output vertices. This can be any plotly color string and may be specified as:
     |          - A hex string (e.g. '#ff0000')
     |          - An rgb/rgba string (e.g. 'rgb(255,0,0)')
     |          - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')
     |          - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')
     |          - A named CSS color.
     |          The default is "black".
     |      vertexColorKey : str , optional
     |          The dictionary key under which to find the vertex color. Default is None.
     |      vertexSize : float , optional
     |          The desired size of the vertices. Default is 1.1.
     |      vertexSizeKey : str , optional
     |          The dictionary key under which to find the vertex size. Default is None.
     |      vertexLabelKey : str , optional
     |          The dictionary key to use to display the vertex label. Default is None.
     |      vertexGroupKey : str , optional
     |          The dictionary key to use to display the vertex group. Default is None.
     |      vertexGroups : list , optional
     |          The list of vertex groups against which to index the color of the vertex. Default is [].
     |      vertexMinGroup : int or float , optional
     |          For numeric vertexGroups, vertexMinGroup is the desired minimum value for the scaling of colors. This should match the type of value associated with the vertexGroupKey. If set to None, it is set to the minimum value in vertexGroups. Default is None.
     |      vertexMaxGroup : int or float , optional
     |          For numeric vertexGroups, vertexMaxGroup is the desired maximum value for the scaling of colors. This should match the type of value associated with the vertexGroupKey. If set to None, it is set to the maximum value in vertexGroups. Default is None.
     |      showVertices : bool , optional
     |          If set to True the vertices will be drawn. Otherwise, they will not be drawn. Default is True.
     |      showVertexLabel : bool , optional
     |      showVertexLegend : bool , optional
     |          If set to True the vertex legend will be drawn. Otherwise, it will not be drawn. Default is False.
     |      edgeColor : str , optional
     |          The desired color of the output edges. This can be any plotly color string and may be specified as:
     |          - A hex string (e.g. '#ff0000')
     |          - An rgb/rgba string (e.g. 'rgb(255,0,0)')
     |          - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')
     |          - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')
     |          - A named CSS color.
     |          The default is "black".
     |      edgeColorKey : str , optional
     |          The dictionary key under which to find the edge color. Default is None.
     |      edgeWidth : float , optional
     |          The desired thickness of the output edges. Default is 1.
     |      edgeWidthKey : str , optional
     |          The dictionary key under which to find the edge width. Default is None.
     |      edgeLabelKey : str , optional
     |          The dictionary key to use to display the edge label. Default is None.
     |      edgeGroupKey : str , optional
     |          The dictionary key to use to display the edge group. Default is None.
     |      edgeGroups : list , optional
     |          The list of edge groups against which to index the color of the edge. Default is [].
     |      edgeMinGroup : int or float , optional
     |          For numeric edgeGroups, edgeMinGroup is the desired minimum value for the scaling of colors. This should match the type of value associated with the edgeGroupKey. If set to None, it is set to the minimum value in edgeGroups. Default is None.
     |      edgeMaxGroup : int or float , optional
     |          For numeric edgeGroups, edgeMaxGroup is the desired maximum value for the scaling of colors. This should match the type of value associated with the edgeGroupKey. If set to None, it is set to the maximum value in edgeGroups. Default is None.
     |      showEdges : bool , optional
     |          If set to True the edges will be drawn. Otherwise, they will not be drawn. Default is True.
     |      showEdgeLabel : bool , optional
     |      showEdgeLegend : bool , optional
     |          If set to True the edge legend will be drawn. Otherwise, it will not be drawn. Default is False.
     |      colorScale : str , optional
     |          The desired type of plotly color scales to use (e.g. "Viridis", "Plasma"). Default is "Viridis". For a full list of names, see https://plotly.com/python/builtin-colorscales/.
     |      renderer : str , optional
     |      width : int , optional
     |          The width in pixels of the figure. The default value is 950.
     |      height : int , optional
     |          The height in pixels of the figure. The default value is 950.
     |      xAxis : bool , optional
     |          If set to True the x axis is drawn. Otherwise it is not drawn. Default is False.
     |      yAxis : bool , optional
     |          If set to True the y axis is drawn. Otherwise it is not drawn. Default is False.
     |      zAxis : bool , optional
     |          If set to True the z axis is drawn. Otherwise it is not drawn. Default is False.
     |      axisSize : float , optional
     |          The size of the X, Y, Z, axes. Default is 1.
     |      backgroundColor : str , optional
     |          The desired color of the background. This can be any plotly color string and may be specified as:
     |          - A hex string (e.g. '#ff0000')
     |          - An rgb/rgba string (e.g. 'rgb(255,0,0)')
     |          - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')
     |          - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')
     |          - A named CSS color.
     |          The default is "rgba(0,0,0,0)".
     |      marginLeft : int , optional
     |          The size in pixels of the left margin. The default value is 0.
     |      marginRight : int , optional
     |          The size in pixels of the right margin. The default value is 0.
     |      marginTop : int , optional
     |          The size in pixels of the top margin. The default value is 20.
     |      marginBottom : int , optional
     |          The size in pixels of the bottom margin. The default value is 0.
     |      camera : list , optional
     |          The desired location of the camera). Default is [-1.25, -1.25, 1.25].
     |      center : list , optional
     |          The desired center (camera target). Default is [0, 0, 0].
     |      up : list , optional
     |          The desired up vector. Default is [0, 0, 1].
     |      projection : str , optional
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      None
     |
     |  Size(graph)
     |      Returns the graph size of the input graph. The graph size is its number of edges.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |
     |      Returns
     |      -------
     |      int
     |          The number of edges in the input graph.
     |
     |      Finds all subgraph matches from `subgraph` into `supergraph`.
     |      A match is valid if:
     |
     |      Parameters
     |      ----------
     |      subGraph : topologic_core.Graph
     |          The input subgraph.
     |      superGraph : topologic_core.Graph
     |          The input supergraph.
     |      strict : bool , optional
     |          If set to True, each subgraph edge must be represented by a single edge in the supergraph. Otherwise, an edge in the subgraph can be represented either with an edge or a path in the supergraph. Default is False.
     |      vertexMatcher : callable, optional
     |          If specified, this function is called to check if two vertices are matched. The format must be vertex_matcher(sub_vertex, super_vertex, mantissa, tolerance) -> bool.
     |      vertexKey : str , optional
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      list
     |          A list of subgraphs matched to the supergraph. Each vertex in the matched subgraph has a dictionary that merges the keys and values from both the subgraph and the supergraph.
     |
     |  Subgraph(graph, vertices, vertexKey='cutVertex', edgeKey='cutEdge', tolerance=0.0001, silent: bool = False)
     |      Returns a subgraph of the input graph as defined by the input vertices.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexKey : str , optional
     |          vertex cuts are indicated with a value of 1. Default is "cutVertex".
     |      edgeKey : str , optional
     |          edge cuts are indicated with a value of 1. Default is "cutVertex".
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The created subgraph.
     |
     |      Find the symmetric difference (exclusive OR / XOR) of the two input graphs based on the input vertex keys. See https://en.wikipedia.org/wiki/Boolean_operation.-- More      |
     |      Parameters
     |      ----------
     |      graphA : topologic_core.Graph
     |          The first input graph.
     |      graphB : topologic_core.Graph
     |          The second input graph.
     |      vertexKeys : list or str , optional
     |          The vertex dictionary key (str) or keys (list of str) to use to determine if two vertices are the same.
     |          vertices (within the tolerance) will be used to determine sameness. Default is None.
     |      useCentroid : bool , optional
     |          This is not used here, but included for API consistency for boolean operations.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          the resultant graph. Vertex and edge dictionaries are not merged.
     |
     |  TopologicalDistance(graph, vertexA, vertexB, tolerance=0.0001)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexA : topologic_core.Vertex
     |          The first input vertex.
     |      vertexB : topologic_core.Vertex
     |          The second input vertex.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      int
     |          The topological distance between the input vertices.
     |
     |  Topology(graph)
     |      Returns the topology (cluster) of the input graph
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |
     |      Returns
     |      -------
     |      topologic_core.Cluster
     |          The topology of the input graph.
     |
     |  Tree(graph, vertex=None, tolerance=0.0001)
     |      Creates a tree graph version of the input graph rooted at the input vertex.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertex : topologic_core.Vertex , optional
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The tree graph version of the input graph.
     |
     |
     |      Parameters
     |      ----------
     |      graphA : topologic_core.Graph
     |          The first input graph.
     |      graphB : topologic_core.Graph
     |          The second input graph.
     |      vertexKeys : list or str , optional
     |          The vertex dictionary key (str) or keys (list of str) to use to determine if two vertices are the same.
     |          vertices (within the tolerance) will be used to determine sameness. Default is None.
     |      useCentroid : bool , optional
     |          Otherwise, the coordinates of the vertex of the first input graph are used. Default is False.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          the resultant graph. Vertex and edge dictionaries are merged.
     |
     |      Returns the degree of the input vertex. See https://en.wikipedia.org/wiki/Degree_(graph_theory).
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertex : topologic_core.Vertex
     |          The input vertex.
     |      weightKey : str , optional
     |          the vertex degree. If a numeric value cannot be retrieved from an edge, a value of 1 is used instead.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      int
     |          The degree of the input vertex.
     |
     |  Vertices(graph, vertexKey=None, reverse=False)
     |      Returns the list of vertices in the input graph.
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The input graph.
     |      vertexKey : str , optional
     |      reverse : bool , optional
     |
     |      Returns
     |      -------
     |      list
     |          The list of vertices in the input graph.
     |
     |  VisibilityGraph(face, viewpointsA=None, viewpointsB=None, tolerance=0.0001)
     |      Creates a 2D visibility graph.
     |
     |      Parameters
     |      ----------
     |      face : topologic_core.Face
     |      viewpointsA : list , optional
     |          The first input list of viewpoints (vertices). Visibility edges will connect these veritces to viewpointsB. If set to None, this parameters will be set to all vertices of the input face. Default is None.
     |      viewpointsB : list , optional
     |          The input list of viewpoints (vertices). Visibility edges will connect these vertices to viewpointsA. If set to None, this parameters will be set to all vertices of the input face. Default is None.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          The visibility graph.
     |
     |  WLFeatures(graph, key: str = None, iterations: int = 2, silent: bool = False)
     |
     |      Parameters
     |      ----------
     |      graph : topologic_core.Graph
     |          The  input graph.
     |      key : str , optional
     |      iterations : int , optional
     |          The desired number of WL iterations. (non-negative int). Default is 2.
     |      silent : bool, optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      dict
     |          {feature_id: count} where feature_id is an int representing a WL label.
     |
     |
     |      Parameters
     |      ----------
     |      graphA : topologic_core.Graph
     |          The first input graph.
     |      graphB : topologic_core.Graph
     |          The second input graph.
     |      key : str , optional
     |      iterations : int , optional
     |          The desired number of WL iterations. (non-negative int). Default is 2.
     |      normalize : bool , optional
     |          if set to True, the returned value is normalized between 0 and 1. Default is True.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |
     |      Returns
     |      -------
     |      float
     |          The cosine-normalized Weisfeiler-Lehman kernel
     |
     |      Computes the weighted Jaccard similarity between two vertices based on their neighbors and
     |      edge weights. Accepts either one graph (both vertices are in the same graph) or two graphs
     |      (each vertex is in a separate graph).
     |
     |      Parameters
     |      ----------
     |      graphA : topologic_core.Graph
     |          The first graph
     |      graphB : topologic_core.Graph
     |          The second graph (this can be the same as the first graph)
     |      vertexA : topologic_core.Vertex
     |          The first vertex.
     |      vertexB : topologic_core.Vertex
     |          The second vertex.
     |      vertexIDKey : str , optional
     |          The dictionary key under which to find the unique vertex ID. Default is "id".
     |      edgeWeightKey : str , optional
     |          The dictionary key under which to find the weight of the edge for weighted graphs.
     |          The default is None which means all edges are treated as if they have a weight of 1.
     |      mantissa : int , optional
     |          The number of decimal places to round the result to. Default is 6.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      float
     |          Weighted Jaccard similarity score between 0 (no overlap) and 1 (perfect match).
     |
     |  XOR(graphA, graphB, vertexKeys, useCentroid: bool = False, tolerance: float = 0.001, silent: bool = False)
     |      Find the symmetric difference (exclusive OR / XOR) of the two input graphs based on an input vertex key. See https://en.wikipedia.org/wiki/Boolean_operation.-- More  -     |
     |      Parameters
     |      ----------
     |      graphA : topologic_core.Graph
     |          The first input graph.
     |      graphB : topologic_core.Graph
     |          The second input graph.
     |      vertexKeys : list or str , optional
     |          The vertex dictionary key (str) or keys (list of str) to use to determine if two vertices are the same.
     |          vertices (within the tolerance) will be used to determine sameness. Default is None.
     |      useCentroid : bool , optional
     |          This is not used here, but included for API consistency for boolean operations.
     |      tolerance : float , optional
     |          The desired tolerance. Default is 0.0001.
     |      silent : bool , optional
     |          If set to True, error and warning messages are suppressed. Default is False.
     |
     |      Returns
     |      -------
     |      topologic_core.Graph
     |          the resultant graph. Vertex and edge dictionaries are not merged.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)

    class GraphQueueItem(builtins.tuple)
     |  GraphQueueItem(edges)
     |
     |  GraphQueueItem(edges,)
     |
     |  Method resolution order:
     |      GraphQueueItem
     |      builtins.tuple
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __getnewargs__(self)
     |      Return self as a plain tuple.  Used by copy and pickle.
     |
     |  __repr__(self)
     |      Return a nicely formatted representation string
     |
     |  _asdict(self)
     |      Return a new dict which maps field names to their values.
     |
     |  _replace(self, /, **kwds)
     |      Return a new GraphQueueItem object replacing specified fields with new values
     |
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |
     |  _make(iterable) from builtins.type
     |      Make a new GraphQueueItem object from a sequence or iterable
     |
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |
     |  __new__(_cls, edges)
     |      Create new instance of GraphQueueItem(edges,)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  edges
     |      Alias for field number 0
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |
     |  _field_defaults = {}
     |
     |  _fields = ('edges',)
     |
     |  _fields_defaults = {}
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |
     |  __add__(self, value, /)
     |      Return self+value.
     |
     |  __contains__(self, key, /)
     |      Return key in self.
     |
     |  __eq__(self, value, /)
     |      Return self==value.
     |
     |  __ge__(self, value, /)
     |      Return self>=value.
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __getitem__(self, key, /)
     |      Return self[key].
     |
     |  __gt__(self, value, /)
     |      Return self>value.
     |
     |  __hash__(self, /)
     |      Return hash(self).
     |
     |  __iter__(self, /)
     |      Implement iter(self).
     |
     |  __le__(self, value, /)
     |      Return self<=value.
     |
     |  __len__(self, /)
     |      Return len(self).
     |
     |  __lt__(self, value, /)
     |      Return self<value.
     |
     |  __mul__(self, value, /)
     |      Return self*value.
     |
     |  __ne__(self, value, /)
     |      Return self!=value.
     |
     |  __rmul__(self, value, /)
     |      Return value*self.
     |
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |
     |  index(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |
     |      Raises ValueError if the value is not present.

    class MergingProcess(multiprocessing.context.Process)
     |  MergingProcess(message_queue)
     |
     |  Receive message from other processes and merging the result
     |
     |  Method resolution order:
     |      MergingProcess
     |      multiprocessing.context.Process
     |      multiprocessing.process.BaseProcess
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, message_queue)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  wait_message(self)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from multiprocessing.process.BaseProcess:
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  close(self)
     |      Close the Process object.
     |
     |      This method releases resources held by the Process object.  It is
     |      an error to call this method if the child process is still running.
     |
     |  is_alive(self)
     |      Return whether process is alive
     |
     |  join(self, timeout=None)
     |      Wait until child process terminates
     |
     |  kill(self)
     |      Terminate process; sends SIGKILL signal or uses TerminateProcess()
     |
     |  run(self)
     |      Method to be run in sub-process; can be overridden in sub-class
     |
     |  start(self)
     |      Start child process
     |
     |  terminate(self)
     |      Terminate process; sends SIGTERM signal or uses TerminateProcess()
     |
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from multiprocessing.process.BaseProcess:
     |
     |  exitcode
     |      Return exit code of process or `None` if it has yet to stop
     |
     |  ident
     |      Return identifier (PID) of process or `None` if it has yet to start
     |
     |  pid
     |      Return identifier (PID) of process or `None` if it has yet to start
     |
     |  sentinel
     |      Return a file descriptor (Unix) or handle (Windows) suitable for
     |      waiting for process termination.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from multiprocessing.process.BaseProcess:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  authkey
     |
     |  daemon
     |      Return whether process is a daemon
     |
     |  name

    class WorkerProcess(multiprocessing.context.Process)
     |  WorkerProcess(start_index, message_queue, used, face, sources, destinations, tolerance=0.0001)
     |
     |  Creates a 2D navigation graph from a subset of sources and the list of destinations.
     |
     |  Method resolution order:
     |      WorkerProcess
     |      multiprocessing.context.Process
     |      multiprocessing.process.BaseProcess
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, start_index, message_queue, used, face, sources, destinations, tolerance=0.0001)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  run(self)
     |      Method to be run in sub-process; can be overridden in sub-class
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from multiprocessing.process.BaseProcess:
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  close(self)
     |      Close the Process object.
     |
     |      This method releases resources held by the Process object.  It is
     |      an error to call this method if the child process is still running.
     |
     |  is_alive(self)
     |      Return whether process is alive
     |
     |  join(self, timeout=None)
     |      Wait until child process terminates
     |
     |  kill(self)
     |      Terminate process; sends SIGKILL signal or uses TerminateProcess()
     |
     |  start(self)
     |      Start child process
     |
     |  terminate(self)
     |      Terminate process; sends SIGTERM signal or uses TerminateProcess()
     |
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from multiprocessing.process.BaseProcess:
     |
     |  exitcode
     |      Return exit code of process or `None` if it has yet to stop
     |
     |  ident
     |      Return identifier (PID) of process or `None` if it has yet to start
     |
     |  pid
     |      Return identifier (PID) of process or `None` if it has yet to start
     |
     |  sentinel
     |      Return a file descriptor (Unix) or handle (Windows) suitable for
     |      waiting for process termination.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from multiprocessing.process.BaseProcess:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  authkey
     |
     |  daemon
     |      Return whether process is a daemon
     |
     |  name

    class WorkerProcessPool(builtins.object)
     |  WorkerProcessPool(num_workers, message_queue, used, face, sources, destinations, tolerance=0.0001)
     |
     |  Create and manage a list of Worker processes. Each worker process
     |  creates a 2D navigation graph.
     |
     |  Methods defined here:
     |
     |  __init__(self, num_workers, message_queue, used, face, sources, destinations, tolerance=0.0001)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  join(self)
     |
     |  startProcesses(self)
     |
     |  stopProcesses(self)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)